// Code generated by protoc-gen-go. DO NOT EDIT.
// protoc-gen-go-svc: dev

package v1

import (
	context "context"
	errors "errors"

	validation "github.com/go-ozzo/ozzo-validation/v4"
	is "github.com/go-ozzo/ozzo-validation/v4/is"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	extemptypb "google.golang.org/protobuf/types/known/emptypb"
	exttimestamppb "google.golang.org/protobuf/types/known/timestamppb"

	privatepb "github.com/dane/protoc-gen-go-svc/example/proto/go/private"
	private "github.com/dane/protoc-gen-go-svc/example/proto/go/service/private"
	next "github.com/dane/protoc-gen-go-svc/example/proto/go/service/v2"
	publicpb "github.com/dane/protoc-gen-go-svc/example/proto/go/v1"
	nextpb "github.com/dane/protoc-gen-go-svc/example/proto/go/v2"
)

var (
	_ = errors.New
	_ = context.Background
	_ = validation.Validate
	_ = is.Int
	_ = codes.OK
	_ = status.Errorf
	_ = privatepb.RegisterPeopleServer
	_ = publicpb.RegisterPeopleServer
	_ = private.ValidatorName
	_ = nextpb.RegisterPeopleServer
	_ = next.ValidatorName
)

const (
	ConverterName = "example.v1.Converter"
	ValidatorName = "example.v1.Validator"
)

type Service struct {
	Validator
	Converter
	publicpb.PeopleServer
	Private *private.Service
	Next    *next.Service
}

func NewConverter() Converter {
	return converter{}
}

type Converter interface {
	Name() string
	ToPublicPerson(*nextpb.Person, *privatepb.Person) (*publicpb.Person, error)
	ToDeprecatedPublicPerson(*privatepb.Person) (*publicpb.Person, error)
	ToPrivatePerson(*publicpb.Person) *privatepb.Person

	ToNextPerson(*publicpb.Person) *nextpb.Person
	ToPublicHobby(*nextpb.Hobby, *privatepb.Hobby) (*publicpb.Hobby, error)
	ToDeprecatedPublicHobby(*privatepb.Hobby) (*publicpb.Hobby, error)
	ToPrivateHobby(*publicpb.Hobby) *privatepb.Hobby

	ToNextHobby(*publicpb.Hobby) *nextpb.Hobby
	ToPublicCoding(*nextpb.Coding, *privatepb.Coding) (*publicpb.Coding, error)
	ToDeprecatedPublicCoding(*privatepb.Coding) (*publicpb.Coding, error)
	ToPrivateCoding(*publicpb.Coding) *privatepb.Coding

	ToNextCoding(*publicpb.Coding) *nextpb.Coding
	ToPublicReading(*nextpb.Reading, *privatepb.Reading) (*publicpb.Reading, error)
	ToDeprecatedPublicReading(*privatepb.Reading) (*publicpb.Reading, error)
	ToPrivateReading(*publicpb.Reading) *privatepb.Reading

	ToNextReading(*publicpb.Reading) *nextpb.Reading
	ToPublicBiking(*nextpb.Cycling, *privatepb.Cycling) (*publicpb.Biking, error)
	ToDeprecatedPublicBiking(*privatepb.Cycling) (*publicpb.Biking, error)
	ToPrivateCycling(*publicpb.Biking) *privatepb.Cycling

	ToNextCycling(*publicpb.Biking) *nextpb.Cycling
	ToPublicCreateRequest(*nextpb.CreateRequest, *privatepb.CreateRequest) (*publicpb.CreateRequest, error)
	ToDeprecatedPublicCreateRequest(*privatepb.CreateRequest) (*publicpb.CreateRequest, error)
	ToPrivateCreateRequest(*publicpb.CreateRequest) *privatepb.CreateRequest

	ToNextCreateRequest(*publicpb.CreateRequest) *nextpb.CreateRequest
	ToPublicCreateResponse(*nextpb.CreateResponse, *privatepb.CreateResponse) (*publicpb.CreateResponse, error)
	ToDeprecatedPublicCreateResponse(*privatepb.CreateResponse) (*publicpb.CreateResponse, error)
	ToPrivateCreateResponse(*publicpb.CreateResponse) *privatepb.CreateResponse

	ToNextCreateResponse(*publicpb.CreateResponse) *nextpb.CreateResponse
	ToPublicGetRequest(*nextpb.GetRequest, *privatepb.FetchRequest) (*publicpb.GetRequest, error)
	ToDeprecatedPublicGetRequest(*privatepb.FetchRequest) (*publicpb.GetRequest, error)
	ToPrivateFetchRequest(*publicpb.GetRequest) *privatepb.FetchRequest

	ToNextGetRequest(*publicpb.GetRequest) *nextpb.GetRequest
	ToPublicGetResponse(*nextpb.GetResponse, *privatepb.FetchResponse) (*publicpb.GetResponse, error)
	ToDeprecatedPublicGetResponse(*privatepb.FetchResponse) (*publicpb.GetResponse, error)
	ToPrivateFetchResponse(*publicpb.GetResponse) *privatepb.FetchResponse

	ToNextGetResponse(*publicpb.GetResponse) *nextpb.GetResponse
	ToPublicDeleteRequest(*nextpb.DeleteRequest, *privatepb.DeleteRequest) (*publicpb.DeleteRequest, error)
	ToDeprecatedPublicDeleteRequest(*privatepb.DeleteRequest) (*publicpb.DeleteRequest, error)
	ToPrivateDeleteRequest(*publicpb.DeleteRequest) *privatepb.DeleteRequest

	ToNextDeleteRequest(*publicpb.DeleteRequest) *nextpb.DeleteRequest
	ToPublicDeleteResponse(*nextpb.DeleteResponse, *privatepb.DeleteResponse) (*publicpb.DeleteResponse, error)
	ToDeprecatedPublicDeleteResponse(*privatepb.DeleteResponse) (*publicpb.DeleteResponse, error)
	ToPrivateDeleteResponse(*publicpb.DeleteResponse) *privatepb.DeleteResponse

	ToNextDeleteResponse(*publicpb.DeleteResponse) *nextpb.DeleteResponse
	ToDeprecatedPublicListRequest(*privatepb.ListRequest) (*publicpb.ListRequest, error)
	ToPrivateListRequest(*publicpb.ListRequest) *privatepb.ListRequest

	ToDeprecatedPublicListResponse(*privatepb.ListResponse) (*publicpb.ListResponse, error)
	ToPrivateListResponse(*publicpb.ListResponse) *privatepb.ListResponse

	ToPublicExternalTimestamp(*exttimestamppb.Timestamp, *exttimestamppb.Timestamp) (*exttimestamppb.Timestamp, error)
	ToDeprecatedPublicExternalTimestamp(*exttimestamppb.Timestamp) (*exttimestamppb.Timestamp, error)
	ToPrivateExternalTimestamp(*exttimestamppb.Timestamp) *exttimestamppb.Timestamp

	ToNextExternalTimestamp(*exttimestamppb.Timestamp) *exttimestamppb.Timestamp
	ToPublicPingInput_ExternalEmpty(*nextpb.PingRequest, *privatepb.PingRequest) (*extemptypb.Empty, error)
	ToDeprecatedPublicPingInput_ExternalEmpty(*privatepb.PingRequest) (*extemptypb.Empty, error)
	ToPrivatePingRequest(*extemptypb.Empty) *privatepb.PingRequest

	ToNextPingRequest(*extemptypb.Empty) *nextpb.PingRequest
	ToPublicPingOutput_ExternalEmpty(*nextpb.PingResponse, *privatepb.PingResponse) (*extemptypb.Empty, error)
	ToDeprecatedPublicPingOutput_ExternalEmpty(*privatepb.PingResponse) (*extemptypb.Empty, error)
	ToPrivatePingResponse(*extemptypb.Empty) *privatepb.PingResponse

	ToNextPingResponse(*extemptypb.Empty) *nextpb.PingResponse
}

type converter struct{}

func (c converter) Name() string {
	return ConverterName
}

func (c converter) ToPublicPerson(in *nextpb.Person, priv *privatepb.Person) (*publicpb.Person, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	required["Id"] = validation.Validate(in.GetId(), validation.Required)
	required["FirstName"] = validation.Validate(priv.GetFirstName(), validation.Required)
	required["LastName"] = validation.Validate(priv.GetLastName(), validation.Required)
	required["Employment"] = validation.Validate(in.GetEmployment(), validation.Required)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Person
	var err error

	out.Id = in.Id
	out.FirstName = priv.FirstName
	out.LastName = priv.LastName
	switch in.Employment {
	case nextpb.Person_UNSET:
		out.Employment = publicpb.Person_UNSET
	case nextpb.Person_FULL_TIME:
		out.Employment = publicpb.Person_EMPLOYED
	case nextpb.Person_PART_TIME:
		out.Employment = publicpb.Person_EMPLOYED
	case nextpb.Person_UNEMPLOYED:
		out.Employment = publicpb.Person_UNEMPLOYED
	default:
		return nil, errors.New(`failed to populate field "Employment"`)
	}
	out.CreatedAt = in.CreatedAt
	out.UpdatedAt = in.UpdatedAt
	out.Hobby, err = c.ToPublicHobby(in.Hobby, priv.Hobby)
	if err != nil {
		return nil, err
	}
	return &out, err
}
func (c converter) ToDeprecatedPublicPerson(priv *privatepb.Person) (*publicpb.Person, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	required["Id"] = validation.Validate(priv.GetId(), validation.Required)
	required["FirstName"] = validation.Validate(priv.GetFirstName(), validation.Required)
	required["LastName"] = validation.Validate(priv.GetLastName(), validation.Required)
	required["Employment"] = validation.Validate(priv.GetEmployment(), validation.Required)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Person
	var err error

	out.Id = priv.Id
	out.FirstName = priv.FirstName
	out.LastName = priv.LastName
	switch priv.Employment {
	case privatepb.Person_UNDEFINED:
		out.Employment = publicpb.Person_UNSET
	case privatepb.Person_FULL_TIME:
		out.Employment = publicpb.Person_EMPLOYED
	case privatepb.Person_PART_TIME:
		out.Employment = publicpb.Person_EMPLOYED
	case privatepb.Person_UNEMPLOYED:
		out.Employment = publicpb.Person_UNEMPLOYED
	default:
		return nil, errors.New(`failed to populate field "Employment"`)
	}
	out.CreatedAt = priv.CreatedAt
	out.UpdatedAt = priv.UpdatedAt
	out.Hobby, err = c.ToDeprecatedPublicHobby(priv.Hobby)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToPrivatePerson(in *publicpb.Person) *privatepb.Person {
	if in == nil {
		return nil
	}

	var out privatepb.Person
	out.Id = in.Id
	out.FirstName = in.FirstName
	out.LastName = in.LastName
	switch in.Employment {
	case publicpb.Person_UNSET:
		out.Employment = privatepb.Person_UNDEFINED
	case publicpb.Person_EMPLOYED:
		out.Employment = privatepb.Person_FULL_TIME
	case publicpb.Person_UNEMPLOYED:
		out.Employment = privatepb.Person_UNEMPLOYED
	}
	out.CreatedAt = in.CreatedAt
	out.UpdatedAt = in.UpdatedAt
	out.Hobby = c.ToPrivateHobby(in.Hobby)
	return &out
}

func (c converter) ToNextPerson(in *publicpb.Person) *nextpb.Person {
	if in == nil {
		return nil
	}

	var out nextpb.Person

	out.Id = in.Id
	switch in.Employment {
	case publicpb.Person_UNSET:
		out.Employment = nextpb.Person_UNSET
	case publicpb.Person_EMPLOYED:
		out.Employment = nextpb.Person_FULL_TIME
	case publicpb.Person_UNEMPLOYED:
		out.Employment = nextpb.Person_UNEMPLOYED
	}
	out.CreatedAt = in.CreatedAt
	out.UpdatedAt = in.UpdatedAt
	out.Hobby = c.ToNextHobby(in.Hobby)
	return &out
}
func (c converter) ToPublicHobby(in *nextpb.Hobby, priv *privatepb.Hobby) (*publicpb.Hobby, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Hobby
	var err error

	switch in.Type.(type) {
	case *nextpb.Hobby_Coding:
		value, err := c.ToPublicCoding(in.GetCoding(), priv.GetCoding())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Coding{
			Coding: value,
		}
	case *nextpb.Hobby_Reading:
		value, err := c.ToPublicReading(in.GetReading(), priv.GetReading())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Reading{
			Reading: value,
		}
	case *nextpb.Hobby_Cycling:
		value, err := c.ToPublicBiking(in.GetCycling(), priv.GetCycling())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Biking{
			Biking: value,
		}
	}
	return &out, err
}
func (c converter) ToDeprecatedPublicHobby(priv *privatepb.Hobby) (*publicpb.Hobby, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Hobby
	var err error

	switch priv.Type.(type) {
	case *privatepb.Hobby_Coding:
		value, err := c.ToDeprecatedPublicCoding(priv.GetCoding())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Coding{
			Coding: value,
		}
	case *privatepb.Hobby_Reading:
		value, err := c.ToDeprecatedPublicReading(priv.GetReading())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Reading{
			Reading: value,
		}
	case *privatepb.Hobby_Cycling:
		value, err := c.ToDeprecatedPublicBiking(priv.GetCycling())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Biking{
			Biking: value,
		}
	}
	return &out, err
}

func (c converter) ToPrivateHobby(in *publicpb.Hobby) *privatepb.Hobby {
	if in == nil {
		return nil
	}

	var out privatepb.Hobby
	switch in.Type.(type) {
	case *publicpb.Hobby_Coding:
		out.Type = &privatepb.Hobby_Coding{
			Coding: c.ToPrivateCoding(in.GetCoding()),
		}
	case *publicpb.Hobby_Reading:
		out.Type = &privatepb.Hobby_Reading{
			Reading: c.ToPrivateReading(in.GetReading()),
		}
	case *publicpb.Hobby_Biking:
		out.Type = &privatepb.Hobby_Cycling{
			Cycling: c.ToPrivateCycling(in.GetBiking()),
		}
	}
	return &out
}

func (c converter) ToNextHobby(in *publicpb.Hobby) *nextpb.Hobby {
	if in == nil {
		return nil
	}

	var out nextpb.Hobby

	switch in.Type.(type) {
	case *publicpb.Hobby_Coding:
		out.Type = &nextpb.Hobby_Coding{
			Coding: c.ToNextCoding(in.GetCoding()),
		}
	case *publicpb.Hobby_Reading:
		out.Type = &nextpb.Hobby_Reading{
			Reading: c.ToNextReading(in.GetReading()),
		}
	case *publicpb.Hobby_Biking:
		out.Type = &nextpb.Hobby_Cycling{
			Cycling: c.ToNextCycling(in.GetBiking()),
		}
	}
	return &out
}
func (c converter) ToPublicCoding(in *nextpb.Coding, priv *privatepb.Coding) (*publicpb.Coding, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Coding
	var err error

	out.Language = in.Language
	return &out, err
}
func (c converter) ToDeprecatedPublicCoding(priv *privatepb.Coding) (*publicpb.Coding, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Coding
	var err error

	out.Language = priv.Language
	return &out, err
}

func (c converter) ToPrivateCoding(in *publicpb.Coding) *privatepb.Coding {
	if in == nil {
		return nil
	}

	var out privatepb.Coding
	out.Language = in.Language
	return &out
}

func (c converter) ToNextCoding(in *publicpb.Coding) *nextpb.Coding {
	if in == nil {
		return nil
	}

	var out nextpb.Coding

	out.Language = in.Language
	return &out
}
func (c converter) ToPublicReading(in *nextpb.Reading, priv *privatepb.Reading) (*publicpb.Reading, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Reading
	var err error

	out.Genre = in.Genre
	return &out, err
}
func (c converter) ToDeprecatedPublicReading(priv *privatepb.Reading) (*publicpb.Reading, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Reading
	var err error

	out.Genre = priv.Genre
	return &out, err
}

func (c converter) ToPrivateReading(in *publicpb.Reading) *privatepb.Reading {
	if in == nil {
		return nil
	}

	var out privatepb.Reading
	out.Genre = in.Genre
	return &out
}

func (c converter) ToNextReading(in *publicpb.Reading) *nextpb.Reading {
	if in == nil {
		return nil
	}

	var out nextpb.Reading

	out.Genre = in.Genre
	return &out
}
func (c converter) ToPublicBiking(in *nextpb.Cycling, priv *privatepb.Cycling) (*publicpb.Biking, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Biking
	var err error

	out.Style = in.Style
	return &out, err
}
func (c converter) ToDeprecatedPublicBiking(priv *privatepb.Cycling) (*publicpb.Biking, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Biking
	var err error

	out.Style = priv.Style
	return &out, err
}

func (c converter) ToPrivateCycling(in *publicpb.Biking) *privatepb.Cycling {
	if in == nil {
		return nil
	}

	var out privatepb.Cycling
	out.Style = in.Style
	return &out
}

func (c converter) ToNextCycling(in *publicpb.Biking) *nextpb.Cycling {
	if in == nil {
		return nil
	}

	var out nextpb.Cycling

	out.Style = in.Style
	return &out
}
func (c converter) ToPublicCreateRequest(in *nextpb.CreateRequest, priv *privatepb.CreateRequest) (*publicpb.CreateRequest, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.CreateRequest
	var err error

	out.Id = in.Id
	out.FirstName = priv.FirstName
	out.LastName = priv.LastName
	switch in.Employment {
	case nextpb.Person_UNSET:
		out.Employment = publicpb.Person_UNSET
	case nextpb.Person_FULL_TIME:
		out.Employment = publicpb.Person_EMPLOYED
	case nextpb.Person_PART_TIME:
		out.Employment = publicpb.Person_EMPLOYED
	case nextpb.Person_UNEMPLOYED:
		out.Employment = publicpb.Person_UNEMPLOYED
	default:
		return nil, errors.New(`failed to populate field "Employment"`)
	}
	out.Hobby, err = c.ToPublicHobby(in.Hobby, priv.Hobby)
	if err != nil {
		return nil, err
	}
	return &out, err
}
func (c converter) ToDeprecatedPublicCreateRequest(priv *privatepb.CreateRequest) (*publicpb.CreateRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.CreateRequest
	var err error

	out.Id = priv.Id
	out.FirstName = priv.FirstName
	out.LastName = priv.LastName
	switch priv.Employment {
	case privatepb.Person_UNDEFINED:
		out.Employment = publicpb.Person_UNSET
	case privatepb.Person_FULL_TIME:
		out.Employment = publicpb.Person_EMPLOYED
	case privatepb.Person_PART_TIME:
		out.Employment = publicpb.Person_EMPLOYED
	case privatepb.Person_UNEMPLOYED:
		out.Employment = publicpb.Person_UNEMPLOYED
	default:
		return nil, errors.New(`failed to populate field "Employment"`)
	}
	out.Hobby, err = c.ToDeprecatedPublicHobby(priv.Hobby)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToPrivateCreateRequest(in *publicpb.CreateRequest) *privatepb.CreateRequest {
	if in == nil {
		return nil
	}

	var out privatepb.CreateRequest
	out.Id = in.Id
	out.FirstName = in.FirstName
	out.LastName = in.LastName
	switch in.Employment {
	case publicpb.Person_UNSET:
		out.Employment = privatepb.Person_UNDEFINED
	case publicpb.Person_EMPLOYED:
		out.Employment = privatepb.Person_FULL_TIME
	case publicpb.Person_UNEMPLOYED:
		out.Employment = privatepb.Person_UNEMPLOYED
	}
	out.Hobby = c.ToPrivateHobby(in.Hobby)
	return &out
}

func (c converter) ToNextCreateRequest(in *publicpb.CreateRequest) *nextpb.CreateRequest {
	if in == nil {
		return nil
	}

	var out nextpb.CreateRequest

	out.Id = in.Id
	switch in.Employment {
	case publicpb.Person_UNSET:
		out.Employment = nextpb.Person_UNSET
	case publicpb.Person_EMPLOYED:
		out.Employment = nextpb.Person_FULL_TIME
	case publicpb.Person_UNEMPLOYED:
		out.Employment = nextpb.Person_UNEMPLOYED
	}
	out.Hobby = c.ToNextHobby(in.Hobby)
	return &out
}
func (c converter) ToPublicCreateResponse(in *nextpb.CreateResponse, priv *privatepb.CreateResponse) (*publicpb.CreateResponse, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.CreateResponse
	var err error

	out.Person, err = c.ToPublicPerson(in.Person, priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}
func (c converter) ToDeprecatedPublicCreateResponse(priv *privatepb.CreateResponse) (*publicpb.CreateResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.CreateResponse
	var err error

	out.Person, err = c.ToDeprecatedPublicPerson(priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToPrivateCreateResponse(in *publicpb.CreateResponse) *privatepb.CreateResponse {
	if in == nil {
		return nil
	}

	var out privatepb.CreateResponse
	out.Person = c.ToPrivatePerson(in.Person)
	return &out
}

func (c converter) ToNextCreateResponse(in *publicpb.CreateResponse) *nextpb.CreateResponse {
	if in == nil {
		return nil
	}

	var out nextpb.CreateResponse

	out.Person = c.ToNextPerson(in.Person)
	return &out
}
func (c converter) ToPublicGetRequest(in *nextpb.GetRequest, priv *privatepb.FetchRequest) (*publicpb.GetRequest, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.GetRequest
	var err error

	out.Id = in.Id
	return &out, err
}
func (c converter) ToDeprecatedPublicGetRequest(priv *privatepb.FetchRequest) (*publicpb.GetRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.GetRequest
	var err error

	out.Id = priv.Id
	return &out, err
}

func (c converter) ToPrivateFetchRequest(in *publicpb.GetRequest) *privatepb.FetchRequest {
	if in == nil {
		return nil
	}

	var out privatepb.FetchRequest
	out.Id = in.Id
	return &out
}

func (c converter) ToNextGetRequest(in *publicpb.GetRequest) *nextpb.GetRequest {
	if in == nil {
		return nil
	}

	var out nextpb.GetRequest

	out.Id = in.Id
	return &out
}
func (c converter) ToPublicGetResponse(in *nextpb.GetResponse, priv *privatepb.FetchResponse) (*publicpb.GetResponse, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.GetResponse
	var err error

	out.Person, err = c.ToPublicPerson(in.Person, priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}
func (c converter) ToDeprecatedPublicGetResponse(priv *privatepb.FetchResponse) (*publicpb.GetResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.GetResponse
	var err error

	out.Person, err = c.ToDeprecatedPublicPerson(priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToPrivateFetchResponse(in *publicpb.GetResponse) *privatepb.FetchResponse {
	if in == nil {
		return nil
	}

	var out privatepb.FetchResponse
	out.Person = c.ToPrivatePerson(in.Person)
	return &out
}

func (c converter) ToNextGetResponse(in *publicpb.GetResponse) *nextpb.GetResponse {
	if in == nil {
		return nil
	}

	var out nextpb.GetResponse

	out.Person = c.ToNextPerson(in.Person)
	return &out
}
func (c converter) ToPublicDeleteRequest(in *nextpb.DeleteRequest, priv *privatepb.DeleteRequest) (*publicpb.DeleteRequest, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.DeleteRequest
	var err error

	out.Id = in.Id
	return &out, err
}
func (c converter) ToDeprecatedPublicDeleteRequest(priv *privatepb.DeleteRequest) (*publicpb.DeleteRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.DeleteRequest
	var err error

	out.Id = priv.Id
	return &out, err
}

func (c converter) ToPrivateDeleteRequest(in *publicpb.DeleteRequest) *privatepb.DeleteRequest {
	if in == nil {
		return nil
	}

	var out privatepb.DeleteRequest
	out.Id = in.Id
	return &out
}

func (c converter) ToNextDeleteRequest(in *publicpb.DeleteRequest) *nextpb.DeleteRequest {
	if in == nil {
		return nil
	}

	var out nextpb.DeleteRequest

	out.Id = in.Id
	return &out
}
func (c converter) ToPublicDeleteResponse(in *nextpb.DeleteResponse, priv *privatepb.DeleteResponse) (*publicpb.DeleteResponse, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.DeleteResponse
	var err error

	return &out, err
}
func (c converter) ToDeprecatedPublicDeleteResponse(priv *privatepb.DeleteResponse) (*publicpb.DeleteResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.DeleteResponse
	var err error

	return &out, err
}

func (c converter) ToPrivateDeleteResponse(in *publicpb.DeleteResponse) *privatepb.DeleteResponse {
	if in == nil {
		return nil
	}

	var out privatepb.DeleteResponse
	return &out
}

func (c converter) ToNextDeleteResponse(in *publicpb.DeleteResponse) *nextpb.DeleteResponse {
	if in == nil {
		return nil
	}

	var out nextpb.DeleteResponse

	return &out
}
func (c converter) ToDeprecatedPublicListRequest(priv *privatepb.ListRequest) (*publicpb.ListRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.ListRequest
	var err error

	return &out, err
}

func (c converter) ToPrivateListRequest(in *publicpb.ListRequest) *privatepb.ListRequest {
	if in == nil {
		return nil
	}

	var out privatepb.ListRequest
	return &out
}

func (c converter) ToDeprecatedPublicListResponse(priv *privatepb.ListResponse) (*publicpb.ListResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.ListResponse
	var err error

	for _, item := range priv.People {
		conv, err := c.ToDeprecatedPublicPerson(item)
		if err != nil {
			return nil, err
		}
		out.People = append(out.People, conv)
	}
	return &out, err
}

func (c converter) ToPrivateListResponse(in *publicpb.ListResponse) *privatepb.ListResponse {
	if in == nil {
		return nil
	}

	var out privatepb.ListResponse
	for _, item := range in.People {
		conv := c.ToPrivatePerson(item)
		out.People = append(out.People, conv)
	}
	return &out
}

func (c converter) ToPublicExternalTimestamp(in *exttimestamppb.Timestamp, priv *exttimestamppb.Timestamp) (*exttimestamppb.Timestamp, error) {
	return in, nil
}
func (c converter) ToDeprecatedPublicExternalTimestamp(priv *exttimestamppb.Timestamp) (*exttimestamppb.Timestamp, error) {
	return priv, nil
}

func (c converter) ToPrivateExternalTimestamp(in *exttimestamppb.Timestamp) *exttimestamppb.Timestamp {
	return in
}

func (c converter) ToNextExternalTimestamp(in *exttimestamppb.Timestamp) *exttimestamppb.Timestamp {
	return in
}
func (c converter) ToPublicPingInput_ExternalEmpty(in *nextpb.PingRequest, priv *privatepb.PingRequest) (*extemptypb.Empty, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out extemptypb.Empty
	var err error

	return &out, err
}
func (c converter) ToDeprecatedPublicPingInput_ExternalEmpty(priv *privatepb.PingRequest) (*extemptypb.Empty, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out extemptypb.Empty
	var err error

	return &out, err
}

func (c converter) ToPrivatePingRequest(in *extemptypb.Empty) *privatepb.PingRequest {
	if in == nil {
		return nil
	}

	var out privatepb.PingRequest
	return &out
}

func (c converter) ToNextPingRequest(in *extemptypb.Empty) *nextpb.PingRequest {
	if in == nil {
		return nil
	}

	var out nextpb.PingRequest

	return &out
}
func (c converter) ToPublicPingOutput_ExternalEmpty(in *nextpb.PingResponse, priv *privatepb.PingResponse) (*extemptypb.Empty, error) {
	if in == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out extemptypb.Empty
	var err error

	return &out, err
}
func (c converter) ToDeprecatedPublicPingOutput_ExternalEmpty(priv *privatepb.PingResponse) (*extemptypb.Empty, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out extemptypb.Empty
	var err error

	return &out, err
}

func (c converter) ToPrivatePingResponse(in *extemptypb.Empty) *privatepb.PingResponse {
	if in == nil {
		return nil
	}

	var out privatepb.PingResponse
	return &out
}

func (c converter) ToNextPingResponse(in *extemptypb.Empty) *nextpb.PingResponse {
	if in == nil {
		return nil
	}

	var out nextpb.PingResponse

	return &out
}

func NewValidator() Validator {
	return validator{}
}

type Validator interface {
	Name() string
	ValidatePerson(*publicpb.Person) error
	ByPerson(interface{}) error
	ValidateHobby(*publicpb.Hobby) error
	ByHobby(interface{}) error
	ValidateCoding(*publicpb.Coding) error
	ByCoding(interface{}) error
	ValidateReading(*publicpb.Reading) error
	ByReading(interface{}) error
	ValidateBiking(*publicpb.Biking) error
	ByBiking(interface{}) error
	ValidateCreateRequest(*publicpb.CreateRequest) error
	ByCreateRequest(interface{}) error
	ValidateCreateResponse(*publicpb.CreateResponse) error
	ByCreateResponse(interface{}) error
	ValidateGetRequest(*publicpb.GetRequest) error
	ByGetRequest(interface{}) error
	ValidateGetResponse(*publicpb.GetResponse) error
	ByGetResponse(interface{}) error
	ValidateDeleteRequest(*publicpb.DeleteRequest) error
	ByDeleteRequest(interface{}) error
	ValidateDeleteResponse(*publicpb.DeleteResponse) error
	ByDeleteResponse(interface{}) error
	ValidateListRequest(*publicpb.ListRequest) error
	ByListRequest(interface{}) error
	ValidateListResponse(*publicpb.ListResponse) error
	ByListResponse(interface{}) error
	ValidateExternalTimestamp(*exttimestamppb.Timestamp) error
	ByExternalTimestamp(interface{}) error
	ValidatePingInput_ExternalEmpty(*extemptypb.Empty) error
	ByPingInput_ExternalEmpty(interface{}) error
	ValidatePingOutput_ExternalEmpty(*extemptypb.Empty) error
	ByPingOutput_ExternalEmpty(interface{}) error
}

type validator struct{}

func (v validator) Name() string {
	return ValidatorName
}

func (v validator) ValidatePerson(in *publicpb.Person) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id),
		validation.Field(&in.FirstName),
		validation.Field(&in.LastName),
		validation.Field(&in.Employment),
		validation.Field(&in.CreatedAt,
			validation.By(v.ByExternalTimestamp),
		),
		validation.Field(&in.UpdatedAt,
			validation.By(v.ByExternalTimestamp),
		),
		validation.Field(&in.Hobby,
			validation.Required,
			validation.By(v.ByHobby),
		),
	)
}

func (v validator) ByPerson(value interface{}) error {
	var in *publicpb.Person
	if v, ok := value.(*publicpb.Person); ok {
		in = v
	} else {
		v := value.(publicpb.Person)
		in = &v
	}

	return v.ValidatePerson(in)
}
func (v validator) ValidateHobby(in *publicpb.Hobby) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Type,
			validation.Required,
		),
	)
}

func (v validator) ByHobby(value interface{}) error {
	var in *publicpb.Hobby
	if v, ok := value.(*publicpb.Hobby); ok {
		in = v
	} else {
		v := value.(publicpb.Hobby)
		in = &v
	}

	return v.ValidateHobby(in)
}
func (v validator) ValidateCoding(in *publicpb.Coding) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Language),
	)
}

func (v validator) ByCoding(value interface{}) error {
	var in *publicpb.Coding
	if v, ok := value.(*publicpb.Coding); ok {
		in = v
	} else {
		v := value.(publicpb.Coding)
		in = &v
	}

	return v.ValidateCoding(in)
}
func (v validator) ValidateReading(in *publicpb.Reading) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Genre),
	)
}

func (v validator) ByReading(value interface{}) error {
	var in *publicpb.Reading
	if v, ok := value.(*publicpb.Reading); ok {
		in = v
	} else {
		v := value.(publicpb.Reading)
		in = &v
	}

	return v.ValidateReading(in)
}
func (v validator) ValidateBiking(in *publicpb.Biking) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Style),
	)
}

func (v validator) ByBiking(value interface{}) error {
	var in *publicpb.Biking
	if v, ok := value.(*publicpb.Biking); ok {
		in = v
	} else {
		v := value.(publicpb.Biking)
		in = &v
	}

	return v.ValidateBiking(in)
}
func (v validator) ValidateCreateRequest(in *publicpb.CreateRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id,
			validation.Required,
			is.UUID,
		),
		validation.Field(&in.FirstName,
			validation.Required,
			validation.Length(2, 0),
		),
		validation.Field(&in.LastName,
			validation.Required,
			validation.Length(2, 0),
		),
		validation.Field(&in.Employment),
		validation.Field(&in.Hobby,
			validation.Required,
			validation.By(v.ByHobby),
		),
	)
}

func (v validator) ByCreateRequest(value interface{}) error {
	var in *publicpb.CreateRequest
	if v, ok := value.(*publicpb.CreateRequest); ok {
		in = v
	} else {
		v := value.(publicpb.CreateRequest)
		in = &v
	}

	return v.ValidateCreateRequest(in)
}
func (v validator) ValidateCreateResponse(in *publicpb.CreateResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Person,
			validation.By(v.ByPerson),
		),
	)
}

func (v validator) ByCreateResponse(value interface{}) error {
	var in *publicpb.CreateResponse
	if v, ok := value.(*publicpb.CreateResponse); ok {
		in = v
	} else {
		v := value.(publicpb.CreateResponse)
		in = &v
	}

	return v.ValidateCreateResponse(in)
}
func (v validator) ValidateGetRequest(in *publicpb.GetRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id,
			validation.Required,
			is.UUID,
		),
	)
}

func (v validator) ByGetRequest(value interface{}) error {
	var in *publicpb.GetRequest
	if v, ok := value.(*publicpb.GetRequest); ok {
		in = v
	} else {
		v := value.(publicpb.GetRequest)
		in = &v
	}

	return v.ValidateGetRequest(in)
}
func (v validator) ValidateGetResponse(in *publicpb.GetResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Person,
			validation.By(v.ByPerson),
		),
	)
}

func (v validator) ByGetResponse(value interface{}) error {
	var in *publicpb.GetResponse
	if v, ok := value.(*publicpb.GetResponse); ok {
		in = v
	} else {
		v := value.(publicpb.GetResponse)
		in = &v
	}

	return v.ValidateGetResponse(in)
}
func (v validator) ValidateDeleteRequest(in *publicpb.DeleteRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id,
			validation.Required,
			is.UUID,
		),
	)
}

func (v validator) ByDeleteRequest(value interface{}) error {
	var in *publicpb.DeleteRequest
	if v, ok := value.(*publicpb.DeleteRequest); ok {
		in = v
	} else {
		v := value.(publicpb.DeleteRequest)
		in = &v
	}

	return v.ValidateDeleteRequest(in)
}
func (v validator) ValidateDeleteResponse(in *publicpb.DeleteResponse) error {
	return validation.ValidateStruct(in)
}

func (v validator) ByDeleteResponse(value interface{}) error {
	var in *publicpb.DeleteResponse
	if v, ok := value.(*publicpb.DeleteResponse); ok {
		in = v
	} else {
		v := value.(publicpb.DeleteResponse)
		in = &v
	}

	return v.ValidateDeleteResponse(in)
}
func (v validator) ValidateListRequest(in *publicpb.ListRequest) error {
	return validation.ValidateStruct(in)
}

func (v validator) ByListRequest(value interface{}) error {
	var in *publicpb.ListRequest
	if v, ok := value.(*publicpb.ListRequest); ok {
		in = v
	} else {
		v := value.(publicpb.ListRequest)
		in = &v
	}

	return v.ValidateListRequest(in)
}
func (v validator) ValidateListResponse(in *publicpb.ListResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.People,
			validation.Each(validation.By(v.ByPerson)),
		),
	)
}

func (v validator) ByListResponse(value interface{}) error {
	var in *publicpb.ListResponse
	if v, ok := value.(*publicpb.ListResponse); ok {
		in = v
	} else {
		v := value.(publicpb.ListResponse)
		in = &v
	}

	return v.ValidateListResponse(in)
}
func (v validator) ValidateExternalTimestamp(in *exttimestamppb.Timestamp) error {
	return nil
}

func (v validator) ByExternalTimestamp(value interface{}) error {
	var in *exttimestamppb.Timestamp
	if v, ok := value.(*exttimestamppb.Timestamp); ok {
		in = v
	} else {
		v := value.(exttimestamppb.Timestamp)
		in = &v
	}

	return v.ValidateExternalTimestamp(in)
}
func (v validator) ValidatePingInput_ExternalEmpty(in *extemptypb.Empty) error {
	return nil
}

func (v validator) ByPingInput_ExternalEmpty(value interface{}) error {
	var in *extemptypb.Empty
	if v, ok := value.(*extemptypb.Empty); ok {
		in = v
	} else {
		v := value.(extemptypb.Empty)
		in = &v
	}

	return v.ValidatePingInput_ExternalEmpty(in)
}
func (v validator) ValidatePingOutput_ExternalEmpty(in *extemptypb.Empty) error {
	return nil
}

func (v validator) ByPingOutput_ExternalEmpty(value interface{}) error {
	var in *extemptypb.Empty
	if v, ok := value.(*extemptypb.Empty); ok {
		in = v
	} else {
		v := value.(extemptypb.Empty)
		in = &v
	}

	return v.ValidatePingOutput_ExternalEmpty(in)
}

func (s *Service) Create(ctx context.Context, in *publicpb.CreateRequest) (*publicpb.CreateResponse, error) {
	if err := s.ValidateCreateRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, _, err := s.CreateImpl(ctx, in)
	return out, err
}
func (s *Service) Get(ctx context.Context, in *publicpb.GetRequest) (*publicpb.GetResponse, error) {
	if err := s.ValidateGetRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, _, err := s.GetImpl(ctx, in)
	return out, err
}
func (s *Service) Delete(ctx context.Context, in *publicpb.DeleteRequest) (*publicpb.DeleteResponse, error) {
	if err := s.ValidateDeleteRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, _, err := s.DeleteImpl(ctx, in)
	return out, err
}
func (s *Service) List(ctx context.Context, in *publicpb.ListRequest) (*publicpb.ListResponse, error) {
	if err := s.ValidateListRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, _, err := s.ListImpl(ctx, in)
	return out, err
}
func (s *Service) Ping(ctx context.Context, in *extemptypb.Empty) (*extemptypb.Empty, error) {
	if err := s.ValidatePingInput_ExternalEmpty(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, _, err := s.PingImpl(ctx, in)
	return out, err
}

func (s *Service) CreateImpl(ctx context.Context, in *publicpb.CreateRequest, mutators ...private.CreateRequestMutator) (*publicpb.CreateResponse, *privatepb.CreateResponse, error) {
	// Set mutators for all deprecated fields
	mutators = append(mutators, private.SetCreateRequest_FirstName(in.FirstName))
	mutators = append(mutators, private.SetCreateRequest_LastName(in.LastName))
	inNext := s.ToNextCreateRequest(in)
	outNext, outPriv, err := s.Next.CreateImpl(ctx, inNext, mutators...)
	if err != nil {
		return nil, nil, err
	}

	out, err := s.ToPublicCreateResponse(outNext, outPriv)
	if err != nil {
		return nil, nil, status.Errorf(codes.FailedPrecondition, "%s", err)
	}
	return out, outPriv, nil
}
func (s *Service) GetImpl(ctx context.Context, in *publicpb.GetRequest, mutators ...private.FetchRequestMutator) (*publicpb.GetResponse, *privatepb.FetchResponse, error) {
	// Set mutators for all deprecated fields
	inNext := s.ToNextGetRequest(in)
	outNext, outPriv, err := s.Next.GetImpl(ctx, inNext, mutators...)
	if err != nil {
		return nil, nil, err
	}

	out, err := s.ToPublicGetResponse(outNext, outPriv)
	if err != nil {
		return nil, nil, status.Errorf(codes.FailedPrecondition, "%s", err)
	}
	return out, outPriv, nil
}
func (s *Service) DeleteImpl(ctx context.Context, in *publicpb.DeleteRequest, mutators ...private.DeleteRequestMutator) (*publicpb.DeleteResponse, *privatepb.DeleteResponse, error) {
	// Set mutators for all deprecated fields
	inNext := s.ToNextDeleteRequest(in)
	outNext, outPriv, err := s.Next.DeleteImpl(ctx, inNext, mutators...)
	if err != nil {
		return nil, nil, err
	}

	out, err := s.ToPublicDeleteResponse(outNext, outPriv)
	if err != nil {
		return nil, nil, status.Errorf(codes.FailedPrecondition, "%s", err)
	}
	return out, outPriv, nil
}
func (s *Service) ListImpl(ctx context.Context, in *publicpb.ListRequest, mutators ...private.ListRequestMutator) (*publicpb.ListResponse, *privatepb.ListResponse, error) {
	// Set mutators for all deprecated fields
	inPriv := s.ToPrivateListRequest(in)
	for _, mutator := range mutators {
		mutator(inPriv)
	}

	outPriv, err := s.Private.List(ctx, inPriv)
	if err != nil {
		return nil, nil, err
	}

	out, err := s.ToDeprecatedPublicListResponse(outPriv)
	if err != nil {
		return nil, nil, status.Errorf(codes.FailedPrecondition, "%s", err)
	}
	return out, outPriv, nil
}
func (s *Service) PingImpl(ctx context.Context, in *extemptypb.Empty, mutators ...private.PingRequestMutator) (*extemptypb.Empty, *privatepb.PingResponse, error) {
	// Set mutators for all deprecated fields
	inNext := s.ToNextPingRequest(in)
	outNext, outPriv, err := s.Next.PingImpl(ctx, inNext, mutators...)
	if err != nil {
		return nil, nil, err
	}

	out, err := s.ToPublicPingOutput_ExternalEmpty(outNext, outPriv)
	if err != nil {
		return nil, nil, status.Errorf(codes.FailedPrecondition, "%s", err)
	}
	return out, outPriv, nil
}
