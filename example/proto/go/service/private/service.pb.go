// Code generated by protoc-gen-go. DO NOT EDIT.
// protoc-gen-go-svc: dev

package private

import (
	context "context"
	errors "errors"

	validation "github.com/go-ozzo/ozzo-validation/v4"
	is "github.com/go-ozzo/ozzo-validation/v4/is"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	extemptypb "google.golang.org/protobuf/types/known/emptypb"
	exttimestamppb "google.golang.org/protobuf/types/known/timestamppb"

	privatepb "github.com/dane/protoc-gen-go-svc/example/proto/go/private"
)

var (
	_ = errors.New
	_ = context.Background
	_ = validation.Validate
	_ = is.Int
	_ = codes.OK
	_ = status.Errorf
	_ = privatepb.RegisterPeopleServer
)

const (
	ConverterName = "example.private.Converter"
	ValidatorName = "example.private.Validator"
)

type Service struct {
	Validator
	Impl privatepb.PeopleServer
}

type CreateRequestMutator func(*privatepb.CreateRequest)

func SetCreateRequest_Id(value string) CreateRequestMutator {
	return func(in *privatepb.CreateRequest) {
		in.Id = value
	}
}
func SetCreateRequest_FirstName(value string) CreateRequestMutator {
	return func(in *privatepb.CreateRequest) {
		in.FirstName = value
	}
}
func SetCreateRequest_LastName(value string) CreateRequestMutator {
	return func(in *privatepb.CreateRequest) {
		in.LastName = value
	}
}
func SetCreateRequest_FullName(value string) CreateRequestMutator {
	return func(in *privatepb.CreateRequest) {
		in.FullName = value
	}
}
func SetCreateRequest_Age(value int64) CreateRequestMutator {
	return func(in *privatepb.CreateRequest) {
		in.Age = value
	}
}
func SetCreateRequest_Employment(value privatepb.Person_Employment) CreateRequestMutator {
	return func(in *privatepb.CreateRequest) {
		in.Employment = value
	}
}
func SetCreateRequest_Hobby(value *privatepb.Hobby) CreateRequestMutator {
	return func(in *privatepb.CreateRequest) {
		in.Hobby = value
	}
}

type FetchRequestMutator func(*privatepb.FetchRequest)

func SetFetchRequest_Id(value string) FetchRequestMutator {
	return func(in *privatepb.FetchRequest) {
		in.Id = value
	}
}

type DeleteRequestMutator func(*privatepb.DeleteRequest)

func SetDeleteRequest_Id(value string) DeleteRequestMutator {
	return func(in *privatepb.DeleteRequest) {
		in.Id = value
	}
}

type ListRequestMutator func(*privatepb.ListRequest)
type UpdateRequestMutator func(*privatepb.UpdateRequest)

func SetUpdateRequest_Id(value string) UpdateRequestMutator {
	return func(in *privatepb.UpdateRequest) {
		in.Id = value
	}
}
func SetUpdateRequest_Person(value *privatepb.Person) UpdateRequestMutator {
	return func(in *privatepb.UpdateRequest) {
		in.Person = value
	}
}

type BatchRequestMutator func(*privatepb.BatchRequest)

func SetBatchRequest_Creates(value []*privatepb.CreateRequest) BatchRequestMutator {
	return func(in *privatepb.BatchRequest) {
		in.Creates = value
	}
}

type ExternalEmptyMutator func(*extemptypb.Empty)

func NewValidator() Validator {
	return validator{}
}

type Validator interface {
	Name() string
	ValidatePerson(*privatepb.Person) error
	ByPerson(interface{}) error
	ValidateHobby(*privatepb.Hobby) error
	ByHobby(interface{}) error
	ValidateCoding(*privatepb.Coding) error
	ByCoding(interface{}) error
	ValidateReading(*privatepb.Reading) error
	ByReading(interface{}) error
	ValidateCycling(*privatepb.Cycling) error
	ByCycling(interface{}) error
	ValidateCreateRequest(*privatepb.CreateRequest) error
	ByCreateRequest(interface{}) error
	ValidateCreateResponse(*privatepb.CreateResponse) error
	ByCreateResponse(interface{}) error
	ValidateFetchRequest(*privatepb.FetchRequest) error
	ByFetchRequest(interface{}) error
	ValidateFetchResponse(*privatepb.FetchResponse) error
	ByFetchResponse(interface{}) error
	ValidateDeleteRequest(*privatepb.DeleteRequest) error
	ByDeleteRequest(interface{}) error
	ValidateDeleteResponse(*privatepb.DeleteResponse) error
	ByDeleteResponse(interface{}) error
	ValidateListRequest(*privatepb.ListRequest) error
	ByListRequest(interface{}) error
	ValidateListResponse(*privatepb.ListResponse) error
	ByListResponse(interface{}) error
	ValidateUpdateRequest(*privatepb.UpdateRequest) error
	ByUpdateRequest(interface{}) error
	ValidateUpdateResponse(*privatepb.UpdateResponse) error
	ByUpdateResponse(interface{}) error
	ValidateBatchRequest(*privatepb.BatchRequest) error
	ByBatchRequest(interface{}) error
	ValidateBatchResponse(*privatepb.BatchResponse) error
	ByBatchResponse(interface{}) error
	ValidateExternalTimestamp(*exttimestamppb.Timestamp) error
	ByExternalTimestamp(interface{}) error
	ValidateExternalEmpty(*extemptypb.Empty) error
	ByExternalEmpty(interface{}) error
}

type validator struct{}

func (v validator) Name() string {
	return ValidatorName
}

func (v validator) ValidatePerson(in *privatepb.Person) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id,
			validation.Required,
			is.UUID,
		),
		validation.Field(&in.FirstName,
			validation.Length(2, 0),
		),
		validation.Field(&in.LastName,
			validation.Length(2, 0),
		),
		validation.Field(&in.FullName,
			validation.Required,
			validation.Length(5, 0),
		),
		validation.Field(&in.Age,
			validation.Required,
			validation.Min(16),
		),
		validation.Field(&in.Employment),
		validation.Field(&in.CreatedAt,
			validation.By(v.ByExternalTimestamp),
		),
		validation.Field(&in.UpdatedAt,
			validation.By(v.ByExternalTimestamp),
		),
		validation.Field(&in.DeletedAt,
			validation.By(v.ByExternalTimestamp),
		),
		validation.Field(&in.Hobby,
			validation.Required,
			validation.By(v.ByHobby),
		),
	)
}

func (v validator) ByPerson(value interface{}) error {
	var in *privatepb.Person
	if v, ok := value.(*privatepb.Person); ok {
		in = v
	} else {
		v := value.(privatepb.Person)
		in = &v
	}

	return v.ValidatePerson(in)
}
func (v validator) ValidateHobby(in *privatepb.Hobby) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Type,
			validation.Required,
		),
	)
}

func (v validator) ByHobby(value interface{}) error {
	var in *privatepb.Hobby
	if v, ok := value.(*privatepb.Hobby); ok {
		in = v
	} else {
		v := value.(privatepb.Hobby)
		in = &v
	}

	return v.ValidateHobby(in)
}
func (v validator) ValidateCoding(in *privatepb.Coding) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Language),
	)
}

func (v validator) ByCoding(value interface{}) error {
	var in *privatepb.Coding
	if v, ok := value.(*privatepb.Coding); ok {
		in = v
	} else {
		v := value.(privatepb.Coding)
		in = &v
	}

	return v.ValidateCoding(in)
}
func (v validator) ValidateReading(in *privatepb.Reading) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Genre),
	)
}

func (v validator) ByReading(value interface{}) error {
	var in *privatepb.Reading
	if v, ok := value.(*privatepb.Reading); ok {
		in = v
	} else {
		v := value.(privatepb.Reading)
		in = &v
	}

	return v.ValidateReading(in)
}
func (v validator) ValidateCycling(in *privatepb.Cycling) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Style),
	)
}

func (v validator) ByCycling(value interface{}) error {
	var in *privatepb.Cycling
	if v, ok := value.(*privatepb.Cycling); ok {
		in = v
	} else {
		v := value.(privatepb.Cycling)
		in = &v
	}

	return v.ValidateCycling(in)
}
func (v validator) ValidateCreateRequest(in *privatepb.CreateRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id,
			validation.Required,
			is.UUID,
		),
		validation.Field(&in.FirstName,
			validation.Length(2, 0),
		),
		validation.Field(&in.LastName,
			validation.Length(2, 0),
		),
		validation.Field(&in.FullName,
			validation.Required,
			validation.Length(5, 0),
		),
		validation.Field(&in.Age,
			validation.Required,
			validation.Min(16),
		),
		validation.Field(&in.Employment,
			validation.Required,
			validation.In(privatepb.Person_FULL_TIME, privatepb.Person_PART_TIME, privatepb.Person_UNEMPLOYED),
		),
		validation.Field(&in.Hobby,
			validation.Required,
			validation.By(v.ByHobby),
		),
	)
}

func (v validator) ByCreateRequest(value interface{}) error {
	var in *privatepb.CreateRequest
	if v, ok := value.(*privatepb.CreateRequest); ok {
		in = v
	} else {
		v := value.(privatepb.CreateRequest)
		in = &v
	}

	return v.ValidateCreateRequest(in)
}
func (v validator) ValidateCreateResponse(in *privatepb.CreateResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Person,
			validation.By(v.ByPerson),
		),
	)
}

func (v validator) ByCreateResponse(value interface{}) error {
	var in *privatepb.CreateResponse
	if v, ok := value.(*privatepb.CreateResponse); ok {
		in = v
	} else {
		v := value.(privatepb.CreateResponse)
		in = &v
	}

	return v.ValidateCreateResponse(in)
}
func (v validator) ValidateFetchRequest(in *privatepb.FetchRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id),
	)
}

func (v validator) ByFetchRequest(value interface{}) error {
	var in *privatepb.FetchRequest
	if v, ok := value.(*privatepb.FetchRequest); ok {
		in = v
	} else {
		v := value.(privatepb.FetchRequest)
		in = &v
	}

	return v.ValidateFetchRequest(in)
}
func (v validator) ValidateFetchResponse(in *privatepb.FetchResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Person,
			validation.By(v.ByPerson),
		),
	)
}

func (v validator) ByFetchResponse(value interface{}) error {
	var in *privatepb.FetchResponse
	if v, ok := value.(*privatepb.FetchResponse); ok {
		in = v
	} else {
		v := value.(privatepb.FetchResponse)
		in = &v
	}

	return v.ValidateFetchResponse(in)
}
func (v validator) ValidateDeleteRequest(in *privatepb.DeleteRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id),
	)
}

func (v validator) ByDeleteRequest(value interface{}) error {
	var in *privatepb.DeleteRequest
	if v, ok := value.(*privatepb.DeleteRequest); ok {
		in = v
	} else {
		v := value.(privatepb.DeleteRequest)
		in = &v
	}

	return v.ValidateDeleteRequest(in)
}
func (v validator) ValidateDeleteResponse(in *privatepb.DeleteResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Person,
			validation.By(v.ByPerson),
		),
	)
}

func (v validator) ByDeleteResponse(value interface{}) error {
	var in *privatepb.DeleteResponse
	if v, ok := value.(*privatepb.DeleteResponse); ok {
		in = v
	} else {
		v := value.(privatepb.DeleteResponse)
		in = &v
	}

	return v.ValidateDeleteResponse(in)
}
func (v validator) ValidateListRequest(in *privatepb.ListRequest) error {
	return validation.ValidateStruct(in)
}

func (v validator) ByListRequest(value interface{}) error {
	var in *privatepb.ListRequest
	if v, ok := value.(*privatepb.ListRequest); ok {
		in = v
	} else {
		v := value.(privatepb.ListRequest)
		in = &v
	}

	return v.ValidateListRequest(in)
}
func (v validator) ValidateListResponse(in *privatepb.ListResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.People,
			validation.Each(validation.By(v.ByPerson)),
		),
	)
}

func (v validator) ByListResponse(value interface{}) error {
	var in *privatepb.ListResponse
	if v, ok := value.(*privatepb.ListResponse); ok {
		in = v
	} else {
		v := value.(privatepb.ListResponse)
		in = &v
	}

	return v.ValidateListResponse(in)
}
func (v validator) ValidateUpdateRequest(in *privatepb.UpdateRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id,
			validation.Required,
			is.UUID,
		),
		validation.Field(&in.Person,
			validation.Required,
			validation.By(v.ByPerson),
		),
	)
}

func (v validator) ByUpdateRequest(value interface{}) error {
	var in *privatepb.UpdateRequest
	if v, ok := value.(*privatepb.UpdateRequest); ok {
		in = v
	} else {
		v := value.(privatepb.UpdateRequest)
		in = &v
	}

	return v.ValidateUpdateRequest(in)
}
func (v validator) ValidateUpdateResponse(in *privatepb.UpdateResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Person,
			validation.By(v.ByPerson),
		),
	)
}

func (v validator) ByUpdateResponse(value interface{}) error {
	var in *privatepb.UpdateResponse
	if v, ok := value.(*privatepb.UpdateResponse); ok {
		in = v
	} else {
		v := value.(privatepb.UpdateResponse)
		in = &v
	}

	return v.ValidateUpdateResponse(in)
}
func (v validator) ValidateBatchRequest(in *privatepb.BatchRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Creates,
			validation.Each(validation.By(v.ByCreateRequest)),
		),
	)
}

func (v validator) ByBatchRequest(value interface{}) error {
	var in *privatepb.BatchRequest
	if v, ok := value.(*privatepb.BatchRequest); ok {
		in = v
	} else {
		v := value.(privatepb.BatchRequest)
		in = &v
	}

	return v.ValidateBatchRequest(in)
}
func (v validator) ValidateBatchResponse(in *privatepb.BatchResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.People,
			validation.Each(validation.By(v.ByPerson)),
		),
	)
}

func (v validator) ByBatchResponse(value interface{}) error {
	var in *privatepb.BatchResponse
	if v, ok := value.(*privatepb.BatchResponse); ok {
		in = v
	} else {
		v := value.(privatepb.BatchResponse)
		in = &v
	}

	return v.ValidateBatchResponse(in)
}
func (v validator) ValidateExternalTimestamp(in *exttimestamppb.Timestamp) error {
	return nil
}

func (v validator) ByExternalTimestamp(value interface{}) error {
	var in *exttimestamppb.Timestamp
	if v, ok := value.(*exttimestamppb.Timestamp); ok {
		in = v
	} else {
		v := value.(exttimestamppb.Timestamp)
		in = &v
	}

	return v.ValidateExternalTimestamp(in)
}
func (v validator) ValidateExternalEmpty(in *extemptypb.Empty) error {
	return nil
}

func (v validator) ByExternalEmpty(value interface{}) error {
	var in *extemptypb.Empty
	if v, ok := value.(*extemptypb.Empty); ok {
		in = v
	} else {
		v := value.(extemptypb.Empty)
		in = &v
	}

	return v.ValidateExternalEmpty(in)
}

func (s *Service) Create(ctx context.Context, in *privatepb.CreateRequest) (*privatepb.CreateResponse, error) {
	if err := s.ValidateCreateRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, err := s.Impl.Create(ctx, in)
	return out, err
}
func (s *Service) Fetch(ctx context.Context, in *privatepb.FetchRequest) (*privatepb.FetchResponse, error) {
	if err := s.ValidateFetchRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, err := s.Impl.Fetch(ctx, in)
	return out, err
}
func (s *Service) Delete(ctx context.Context, in *privatepb.DeleteRequest) (*privatepb.DeleteResponse, error) {
	if err := s.ValidateDeleteRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, err := s.Impl.Delete(ctx, in)
	return out, err
}
func (s *Service) List(ctx context.Context, in *privatepb.ListRequest) (*privatepb.ListResponse, error) {
	if err := s.ValidateListRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, err := s.Impl.List(ctx, in)
	return out, err
}
func (s *Service) Update(ctx context.Context, in *privatepb.UpdateRequest) (*privatepb.UpdateResponse, error) {
	if err := s.ValidateUpdateRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, err := s.Impl.Update(ctx, in)
	return out, err
}
func (s *Service) Batch(ctx context.Context, in *privatepb.BatchRequest) (*privatepb.BatchResponse, error) {
	if err := s.ValidateBatchRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, err := s.Impl.Batch(ctx, in)
	return out, err
}
func (s *Service) Ping(ctx context.Context, in *extemptypb.Empty) (*extemptypb.Empty, error) {
	if err := s.ValidateExternalEmpty(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, err := s.Impl.Ping(ctx, in)
	return out, err
}
