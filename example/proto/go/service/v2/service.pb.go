// Code generated by protoc-gen-go. DO NOT EDIT.
// protoc-gen-go-svc: dev

package v2

import (
	context "context"
	errors "errors"

	validation "github.com/go-ozzo/ozzo-validation/v4"
	is "github.com/go-ozzo/ozzo-validation/v4/is"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	exttimestamppb "google.golang.org/protobuf/types/known/timestamppb"

	privatepb "github.com/dane/protoc-gen-go-svc/example/proto/go/private"
	private "github.com/dane/protoc-gen-go-svc/example/proto/go/service/private"
	publicpb "github.com/dane/protoc-gen-go-svc/example/proto/go/v2"
)

var (
	_ = errors.New
	_ = context.Background
	_ = validation.Validate
	_ = is.Int
	_ = codes.OK
	_ = status.Errorf
	_ = privatepb.RegisterPeopleServer
	_ = publicpb.RegisterPeopleServer
	_ = private.ValidatorName
)

const (
	ConverterName = "example.v2.Converter"
	ValidatorName = "example.v2.Validator"
)

type Service struct {
	Validator
	Converter
	publicpb.PeopleServer
	Private *private.Service
}

func NewConverter() Converter {
	return converter{}
}

type Converter interface {
	Name() string
	ToPublicPerson(*privatepb.Person) (*publicpb.Person, error)
	ToDeprecatedPublicPerson(*privatepb.Person) (*publicpb.Person, error)
	ToPrivatePerson(*publicpb.Person) *privatepb.Person
	ToPublicHobby(*privatepb.Hobby) (*publicpb.Hobby, error)
	ToDeprecatedPublicHobby(*privatepb.Hobby) (*publicpb.Hobby, error)
	ToPrivateHobby(*publicpb.Hobby) *privatepb.Hobby
	ToPublicCoding(*privatepb.Coding) (*publicpb.Coding, error)
	ToDeprecatedPublicCoding(*privatepb.Coding) (*publicpb.Coding, error)
	ToPrivateCoding(*publicpb.Coding) *privatepb.Coding
	ToPublicReading(*privatepb.Reading) (*publicpb.Reading, error)
	ToDeprecatedPublicReading(*privatepb.Reading) (*publicpb.Reading, error)
	ToPrivateReading(*publicpb.Reading) *privatepb.Reading
	ToPublicCycling(*privatepb.Cycling) (*publicpb.Cycling, error)
	ToDeprecatedPublicCycling(*privatepb.Cycling) (*publicpb.Cycling, error)
	ToPrivateCycling(*publicpb.Cycling) *privatepb.Cycling
	ToPublicCreateRequest(*privatepb.CreateRequest) (*publicpb.CreateRequest, error)
	ToDeprecatedPublicCreateRequest(*privatepb.CreateRequest) (*publicpb.CreateRequest, error)
	ToPrivateCreateRequest(*publicpb.CreateRequest) *privatepb.CreateRequest
	ToPublicCreateResponse(*privatepb.CreateResponse) (*publicpb.CreateResponse, error)
	ToDeprecatedPublicCreateResponse(*privatepb.CreateResponse) (*publicpb.CreateResponse, error)
	ToPrivateCreateResponse(*publicpb.CreateResponse) *privatepb.CreateResponse
	ToPublicGetRequest(*privatepb.FetchRequest) (*publicpb.GetRequest, error)
	ToDeprecatedPublicGetRequest(*privatepb.FetchRequest) (*publicpb.GetRequest, error)
	ToPrivateFetchRequest(*publicpb.GetRequest) *privatepb.FetchRequest
	ToPublicGetResponse(*privatepb.FetchResponse) (*publicpb.GetResponse, error)
	ToDeprecatedPublicGetResponse(*privatepb.FetchResponse) (*publicpb.GetResponse, error)
	ToPrivateFetchResponse(*publicpb.GetResponse) *privatepb.FetchResponse
	ToPublicDeleteRequest(*privatepb.DeleteRequest) (*publicpb.DeleteRequest, error)
	ToDeprecatedPublicDeleteRequest(*privatepb.DeleteRequest) (*publicpb.DeleteRequest, error)
	ToPrivateDeleteRequest(*publicpb.DeleteRequest) *privatepb.DeleteRequest
	ToPublicDeleteResponse(*privatepb.DeleteResponse) (*publicpb.DeleteResponse, error)
	ToDeprecatedPublicDeleteResponse(*privatepb.DeleteResponse) (*publicpb.DeleteResponse, error)
	ToPrivateDeleteResponse(*publicpb.DeleteResponse) *privatepb.DeleteResponse
	ToPublicUpdateRequest(*privatepb.UpdateRequest) (*publicpb.UpdateRequest, error)
	ToDeprecatedPublicUpdateRequest(*privatepb.UpdateRequest) (*publicpb.UpdateRequest, error)
	ToPrivateUpdateRequest(*publicpb.UpdateRequest) *privatepb.UpdateRequest
	ToPublicUpdateResponse(*privatepb.UpdateResponse) (*publicpb.UpdateResponse, error)
	ToDeprecatedPublicUpdateResponse(*privatepb.UpdateResponse) (*publicpb.UpdateResponse, error)
	ToPrivateUpdateResponse(*publicpb.UpdateResponse) *privatepb.UpdateResponse
	ToPublicBatchRequest(*privatepb.BatchRequest) (*publicpb.BatchRequest, error)
	ToDeprecatedPublicBatchRequest(*privatepb.BatchRequest) (*publicpb.BatchRequest, error)
	ToPrivateBatchRequest(*publicpb.BatchRequest) *privatepb.BatchRequest
	ToPublicBatchResponse(*privatepb.BatchResponse) (*publicpb.BatchResponse, error)
	ToDeprecatedPublicBatchResponse(*privatepb.BatchResponse) (*publicpb.BatchResponse, error)
	ToPrivateBatchResponse(*publicpb.BatchResponse) *privatepb.BatchResponse
}

type converter struct{}

func (c converter) Name() string {
	return ConverterName
}

func (c converter) ToPublicPerson(priv *privatepb.Person) (*publicpb.Person, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Person
	var err error

	out.Id = priv.Id
	out.FullName = priv.FullName
	out.Age = priv.Age
	switch priv.Employment {
	case privatepb.Person_UNDEFINED:
		out.Employment = publicpb.Person_UNSET
	case privatepb.Person_FULL_TIME:
		out.Employment = publicpb.Person_FULL_TIME
	case privatepb.Person_PART_TIME:
		out.Employment = publicpb.Person_PART_TIME
	case privatepb.Person_UNEMPLOYED:
		out.Employment = publicpb.Person_UNEMPLOYED
	default:
		return nil, errors.New(`failed to populate field "Employment"`)
	}
	out.CreatedAt = priv.CreatedAt
	out.UpdatedAt = priv.UpdatedAt
	out.Hobby, err = c.ToPublicHobby(priv.Hobby)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToDeprecatedPublicPerson(priv *privatepb.Person) (*publicpb.Person, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Person
	var err error

	out.Id = priv.Id
	out.FullName = priv.FullName
	out.Age = priv.Age
	switch priv.Employment {
	case privatepb.Person_UNDEFINED:
		out.Employment = publicpb.Person_UNSET
	case privatepb.Person_FULL_TIME:
		out.Employment = publicpb.Person_FULL_TIME
	case privatepb.Person_PART_TIME:
		out.Employment = publicpb.Person_PART_TIME
	case privatepb.Person_UNEMPLOYED:
		out.Employment = publicpb.Person_UNEMPLOYED
	default:
		return nil, errors.New(`failed to populate field "Employment"`)
	}
	out.CreatedAt = priv.CreatedAt
	out.UpdatedAt = priv.UpdatedAt
	out.Hobby, err = c.ToDeprecatedPublicHobby(priv.Hobby)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToPrivatePerson(in *publicpb.Person) *privatepb.Person {
	if in == nil {
		return nil
	}

	var out privatepb.Person
	out.Id = in.Id
	out.FullName = in.FullName
	out.Age = in.Age
	switch in.Employment {
	case publicpb.Person_UNSET:
		out.Employment = privatepb.Person_UNDEFINED
	case publicpb.Person_FULL_TIME:
		out.Employment = privatepb.Person_FULL_TIME
	case publicpb.Person_PART_TIME:
		out.Employment = privatepb.Person_PART_TIME
	case publicpb.Person_UNEMPLOYED:
		out.Employment = privatepb.Person_UNEMPLOYED
	}
	out.CreatedAt = in.CreatedAt
	out.UpdatedAt = in.UpdatedAt
	out.Hobby = c.ToPrivateHobby(in.Hobby)
	return &out
}

func (c converter) ToPublicHobby(priv *privatepb.Hobby) (*publicpb.Hobby, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Hobby
	var err error

	switch priv.Type.(type) {
	case *privatepb.Hobby_Coding:
		value, err := c.ToPublicCoding(priv.GetCoding())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Coding{
			Coding: value,
		}
	case *privatepb.Hobby_Reading:
		value, err := c.ToPublicReading(priv.GetReading())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Reading{
			Reading: value,
		}
	case *privatepb.Hobby_Cycling:
		value, err := c.ToPublicCycling(priv.GetCycling())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Cycling{
			Cycling: value,
		}
	}
	return &out, err
}

func (c converter) ToDeprecatedPublicHobby(priv *privatepb.Hobby) (*publicpb.Hobby, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Hobby
	var err error

	switch priv.Type.(type) {
	case *privatepb.Hobby_Coding:
		value, err := c.ToDeprecatedPublicCoding(priv.GetCoding())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Coding{
			Coding: value,
		}
	case *privatepb.Hobby_Reading:
		value, err := c.ToDeprecatedPublicReading(priv.GetReading())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Reading{
			Reading: value,
		}
	case *privatepb.Hobby_Cycling:
		value, err := c.ToDeprecatedPublicCycling(priv.GetCycling())
		if err != nil {
			return nil, err
		}
		out.Type = &publicpb.Hobby_Cycling{
			Cycling: value,
		}
	}
	return &out, err
}

func (c converter) ToPrivateHobby(in *publicpb.Hobby) *privatepb.Hobby {
	if in == nil {
		return nil
	}

	var out privatepb.Hobby
	switch in.Type.(type) {
	case *publicpb.Hobby_Coding:
		out.Type = &privatepb.Hobby_Coding{
			Coding: c.ToPrivateCoding(in.GetCoding()),
		}
	case *publicpb.Hobby_Reading:
		out.Type = &privatepb.Hobby_Reading{
			Reading: c.ToPrivateReading(in.GetReading()),
		}
	case *publicpb.Hobby_Cycling:
		out.Type = &privatepb.Hobby_Cycling{
			Cycling: c.ToPrivateCycling(in.GetCycling()),
		}
	}
	return &out
}

func (c converter) ToPublicCoding(priv *privatepb.Coding) (*publicpb.Coding, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Coding
	var err error

	out.Language = priv.Language
	return &out, err
}

func (c converter) ToDeprecatedPublicCoding(priv *privatepb.Coding) (*publicpb.Coding, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Coding
	var err error

	out.Language = priv.Language
	return &out, err
}

func (c converter) ToPrivateCoding(in *publicpb.Coding) *privatepb.Coding {
	if in == nil {
		return nil
	}

	var out privatepb.Coding
	out.Language = in.Language
	return &out
}

func (c converter) ToPublicReading(priv *privatepb.Reading) (*publicpb.Reading, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Reading
	var err error

	out.Genre = priv.Genre
	return &out, err
}

func (c converter) ToDeprecatedPublicReading(priv *privatepb.Reading) (*publicpb.Reading, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Reading
	var err error

	out.Genre = priv.Genre
	return &out, err
}

func (c converter) ToPrivateReading(in *publicpb.Reading) *privatepb.Reading {
	if in == nil {
		return nil
	}

	var out privatepb.Reading
	out.Genre = in.Genre
	return &out
}

func (c converter) ToPublicCycling(priv *privatepb.Cycling) (*publicpb.Cycling, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Cycling
	var err error

	out.Style = priv.Style
	return &out, err
}

func (c converter) ToDeprecatedPublicCycling(priv *privatepb.Cycling) (*publicpb.Cycling, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.Cycling
	var err error

	out.Style = priv.Style
	return &out, err
}

func (c converter) ToPrivateCycling(in *publicpb.Cycling) *privatepb.Cycling {
	if in == nil {
		return nil
	}

	var out privatepb.Cycling
	out.Style = in.Style
	return &out
}

func (c converter) ToPublicCreateRequest(priv *privatepb.CreateRequest) (*publicpb.CreateRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.CreateRequest
	var err error

	out.Id = priv.Id
	out.FullName = priv.FullName
	out.Age = priv.Age
	switch priv.Employment {
	case privatepb.Person_UNDEFINED:
		out.Employment = publicpb.Person_UNSET
	case privatepb.Person_FULL_TIME:
		out.Employment = publicpb.Person_FULL_TIME
	case privatepb.Person_PART_TIME:
		out.Employment = publicpb.Person_PART_TIME
	case privatepb.Person_UNEMPLOYED:
		out.Employment = publicpb.Person_UNEMPLOYED
	default:
		return nil, errors.New(`failed to populate field "Employment"`)
	}
	out.Hobby, err = c.ToPublicHobby(priv.Hobby)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToDeprecatedPublicCreateRequest(priv *privatepb.CreateRequest) (*publicpb.CreateRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.CreateRequest
	var err error

	out.Id = priv.Id
	out.FullName = priv.FullName
	out.Age = priv.Age
	switch priv.Employment {
	case privatepb.Person_UNDEFINED:
		out.Employment = publicpb.Person_UNSET
	case privatepb.Person_FULL_TIME:
		out.Employment = publicpb.Person_FULL_TIME
	case privatepb.Person_PART_TIME:
		out.Employment = publicpb.Person_PART_TIME
	case privatepb.Person_UNEMPLOYED:
		out.Employment = publicpb.Person_UNEMPLOYED
	default:
		return nil, errors.New(`failed to populate field "Employment"`)
	}
	out.Hobby, err = c.ToDeprecatedPublicHobby(priv.Hobby)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToPrivateCreateRequest(in *publicpb.CreateRequest) *privatepb.CreateRequest {
	if in == nil {
		return nil
	}

	var out privatepb.CreateRequest
	out.Id = in.Id
	out.FullName = in.FullName
	out.Age = in.Age
	switch in.Employment {
	case publicpb.Person_UNSET:
		out.Employment = privatepb.Person_UNDEFINED
	case publicpb.Person_FULL_TIME:
		out.Employment = privatepb.Person_FULL_TIME
	case publicpb.Person_PART_TIME:
		out.Employment = privatepb.Person_PART_TIME
	case publicpb.Person_UNEMPLOYED:
		out.Employment = privatepb.Person_UNEMPLOYED
	}
	out.Hobby = c.ToPrivateHobby(in.Hobby)
	return &out
}

func (c converter) ToPublicCreateResponse(priv *privatepb.CreateResponse) (*publicpb.CreateResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.CreateResponse
	var err error

	out.Person, err = c.ToPublicPerson(priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToDeprecatedPublicCreateResponse(priv *privatepb.CreateResponse) (*publicpb.CreateResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.CreateResponse
	var err error

	out.Person, err = c.ToDeprecatedPublicPerson(priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToPrivateCreateResponse(in *publicpb.CreateResponse) *privatepb.CreateResponse {
	if in == nil {
		return nil
	}

	var out privatepb.CreateResponse
	out.Person = c.ToPrivatePerson(in.Person)
	return &out
}

func (c converter) ToPublicGetRequest(priv *privatepb.FetchRequest) (*publicpb.GetRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.GetRequest
	var err error

	out.Id = priv.Id
	return &out, err
}

func (c converter) ToDeprecatedPublicGetRequest(priv *privatepb.FetchRequest) (*publicpb.GetRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.GetRequest
	var err error

	out.Id = priv.Id
	return &out, err
}

func (c converter) ToPrivateFetchRequest(in *publicpb.GetRequest) *privatepb.FetchRequest {
	if in == nil {
		return nil
	}

	var out privatepb.FetchRequest
	out.Id = in.Id
	return &out
}

func (c converter) ToPublicGetResponse(priv *privatepb.FetchResponse) (*publicpb.GetResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.GetResponse
	var err error

	out.Person, err = c.ToPublicPerson(priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToDeprecatedPublicGetResponse(priv *privatepb.FetchResponse) (*publicpb.GetResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.GetResponse
	var err error

	out.Person, err = c.ToDeprecatedPublicPerson(priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToPrivateFetchResponse(in *publicpb.GetResponse) *privatepb.FetchResponse {
	if in == nil {
		return nil
	}

	var out privatepb.FetchResponse
	out.Person = c.ToPrivatePerson(in.Person)
	return &out
}

func (c converter) ToPublicDeleteRequest(priv *privatepb.DeleteRequest) (*publicpb.DeleteRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.DeleteRequest
	var err error

	out.Id = priv.Id
	return &out, err
}

func (c converter) ToDeprecatedPublicDeleteRequest(priv *privatepb.DeleteRequest) (*publicpb.DeleteRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.DeleteRequest
	var err error

	out.Id = priv.Id
	return &out, err
}

func (c converter) ToPrivateDeleteRequest(in *publicpb.DeleteRequest) *privatepb.DeleteRequest {
	if in == nil {
		return nil
	}

	var out privatepb.DeleteRequest
	out.Id = in.Id
	return &out
}

func (c converter) ToPublicDeleteResponse(priv *privatepb.DeleteResponse) (*publicpb.DeleteResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.DeleteResponse
	var err error

	return &out, err
}

func (c converter) ToDeprecatedPublicDeleteResponse(priv *privatepb.DeleteResponse) (*publicpb.DeleteResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.DeleteResponse
	var err error

	return &out, err
}

func (c converter) ToPrivateDeleteResponse(in *publicpb.DeleteResponse) *privatepb.DeleteResponse {
	if in == nil {
		return nil
	}

	var out privatepb.DeleteResponse
	return &out
}

func (c converter) ToPublicUpdateRequest(priv *privatepb.UpdateRequest) (*publicpb.UpdateRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.UpdateRequest
	var err error

	out.Id = priv.Id
	out.Person, err = c.ToPublicPerson(priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToDeprecatedPublicUpdateRequest(priv *privatepb.UpdateRequest) (*publicpb.UpdateRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.UpdateRequest
	var err error

	out.Id = priv.Id
	out.Person, err = c.ToDeprecatedPublicPerson(priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToPrivateUpdateRequest(in *publicpb.UpdateRequest) *privatepb.UpdateRequest {
	if in == nil {
		return nil
	}

	var out privatepb.UpdateRequest
	out.Id = in.Id
	out.Person = c.ToPrivatePerson(in.Person)
	return &out
}

func (c converter) ToPublicUpdateResponse(priv *privatepb.UpdateResponse) (*publicpb.UpdateResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.UpdateResponse
	var err error

	out.Person, err = c.ToPublicPerson(priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToDeprecatedPublicUpdateResponse(priv *privatepb.UpdateResponse) (*publicpb.UpdateResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.UpdateResponse
	var err error

	out.Person, err = c.ToDeprecatedPublicPerson(priv.Person)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c converter) ToPrivateUpdateResponse(in *publicpb.UpdateResponse) *privatepb.UpdateResponse {
	if in == nil {
		return nil
	}

	var out privatepb.UpdateResponse
	out.Person = c.ToPrivatePerson(in.Person)
	return &out
}

func (c converter) ToPublicBatchRequest(priv *privatepb.BatchRequest) (*publicpb.BatchRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.BatchRequest
	var err error

	for _, item := range priv.Creates {
		conv, err := c.ToPublicCreateRequest(item)
		if err != nil {
			return nil, err
		}
		out.Creates = append(out.Creates, conv)
	}
	return &out, err
}

func (c converter) ToDeprecatedPublicBatchRequest(priv *privatepb.BatchRequest) (*publicpb.BatchRequest, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.BatchRequest
	var err error

	for _, item := range priv.Creates {
		conv, err := c.ToDeprecatedPublicCreateRequest(item)
		if err != nil {
			return nil, err
		}
		out.Creates = append(out.Creates, conv)
	}
	return &out, err
}

func (c converter) ToPrivateBatchRequest(in *publicpb.BatchRequest) *privatepb.BatchRequest {
	if in == nil {
		return nil
	}

	var out privatepb.BatchRequest
	for _, item := range in.Creates {
		conv := c.ToPrivateCreateRequest(item)
		out.Creates = append(out.Creates, conv)
	}
	return &out
}

func (c converter) ToPublicBatchResponse(priv *privatepb.BatchResponse) (*publicpb.BatchResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.BatchResponse
	var err error

	for _, item := range priv.People {
		conv, err := c.ToPublicPerson(item)
		if err != nil {
			return nil, err
		}
		out.People = append(out.People, conv)
	}
	return &out, err
}

func (c converter) ToDeprecatedPublicBatchResponse(priv *privatepb.BatchResponse) (*publicpb.BatchResponse, error) {
	if priv == nil {
		return nil, nil
	}

	required := make(validation.Errors)
	if err := required.Filter(); err != nil {
		return nil, err
	}

	var out publicpb.BatchResponse
	var err error

	for _, item := range priv.People {
		conv, err := c.ToDeprecatedPublicPerson(item)
		if err != nil {
			return nil, err
		}
		out.People = append(out.People, conv)
	}
	return &out, err
}

func (c converter) ToPrivateBatchResponse(in *publicpb.BatchResponse) *privatepb.BatchResponse {
	if in == nil {
		return nil
	}

	var out privatepb.BatchResponse
	for _, item := range in.People {
		conv := c.ToPrivatePerson(item)
		out.People = append(out.People, conv)
	}
	return &out
}

func NewValidator() Validator {
	return validator{}
}

type Validator interface {
	Name() string
	ValidatePerson(*publicpb.Person) error
	ByPerson(interface{}) error
	ValidateHobby(*publicpb.Hobby) error
	ByHobby(interface{}) error
	ValidateCoding(*publicpb.Coding) error
	ByCoding(interface{}) error
	ValidateReading(*publicpb.Reading) error
	ByReading(interface{}) error
	ValidateCycling(*publicpb.Cycling) error
	ByCycling(interface{}) error
	ValidateCreateRequest(*publicpb.CreateRequest) error
	ByCreateRequest(interface{}) error
	ValidateCreateResponse(*publicpb.CreateResponse) error
	ByCreateResponse(interface{}) error
	ValidateGetRequest(*publicpb.GetRequest) error
	ByGetRequest(interface{}) error
	ValidateGetResponse(*publicpb.GetResponse) error
	ByGetResponse(interface{}) error
	ValidateDeleteRequest(*publicpb.DeleteRequest) error
	ByDeleteRequest(interface{}) error
	ValidateDeleteResponse(*publicpb.DeleteResponse) error
	ByDeleteResponse(interface{}) error
	ValidateUpdateRequest(*publicpb.UpdateRequest) error
	ByUpdateRequest(interface{}) error
	ValidateUpdateResponse(*publicpb.UpdateResponse) error
	ByUpdateResponse(interface{}) error
	ValidateBatchRequest(*publicpb.BatchRequest) error
	ByBatchRequest(interface{}) error
	ValidateBatchResponse(*publicpb.BatchResponse) error
	ByBatchResponse(interface{}) error
	ValidateExternalTimestamp(*exttimestamppb.Timestamp) error
	ByExternalTimestamp(interface{}) error
}

type validator struct{}

func (v validator) Name() string {
	return ValidatorName
}

func (v validator) ValidatePerson(in *publicpb.Person) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id),
		validation.Field(&in.FullName,
			validation.Required,
		),
		validation.Field(&in.Age),
		validation.Field(&in.Employment),
		validation.Field(&in.CreatedAt,
			validation.By(v.ByExternalTimestamp),
		),
		validation.Field(&in.UpdatedAt,
			validation.By(v.ByExternalTimestamp),
		),
		validation.Field(&in.Hobby,
			validation.Required,
			validation.By(v.ByHobby),
		),
	)
}

func (v validator) ByPerson(value interface{}) error {
	var in *publicpb.Person
	if v, ok := value.(*publicpb.Person); ok {
		in = v
	} else {
		v := value.(publicpb.Person)
		in = &v
	}

	return v.ValidatePerson(in)
}
func (v validator) ValidateHobby(in *publicpb.Hobby) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Type,
			validation.Required,
		),
	)
}

func (v validator) ByHobby(value interface{}) error {
	var in *publicpb.Hobby
	if v, ok := value.(*publicpb.Hobby); ok {
		in = v
	} else {
		v := value.(publicpb.Hobby)
		in = &v
	}

	return v.ValidateHobby(in)
}
func (v validator) ValidateCoding(in *publicpb.Coding) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Language),
	)
}

func (v validator) ByCoding(value interface{}) error {
	var in *publicpb.Coding
	if v, ok := value.(*publicpb.Coding); ok {
		in = v
	} else {
		v := value.(publicpb.Coding)
		in = &v
	}

	return v.ValidateCoding(in)
}
func (v validator) ValidateReading(in *publicpb.Reading) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Genre),
	)
}

func (v validator) ByReading(value interface{}) error {
	var in *publicpb.Reading
	if v, ok := value.(*publicpb.Reading); ok {
		in = v
	} else {
		v := value.(publicpb.Reading)
		in = &v
	}

	return v.ValidateReading(in)
}
func (v validator) ValidateCycling(in *publicpb.Cycling) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Style),
	)
}

func (v validator) ByCycling(value interface{}) error {
	var in *publicpb.Cycling
	if v, ok := value.(*publicpb.Cycling); ok {
		in = v
	} else {
		v := value.(publicpb.Cycling)
		in = &v
	}

	return v.ValidateCycling(in)
}
func (v validator) ValidateCreateRequest(in *publicpb.CreateRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id,
			validation.Required,
			is.UUID,
		),
		validation.Field(&in.FullName,
			validation.Required,
			validation.Length(4, 0),
		),
		validation.Field(&in.Age),
		validation.Field(&in.Employment),
		validation.Field(&in.Hobby,
			validation.Required,
			validation.By(v.ByHobby),
		),
	)
}

func (v validator) ByCreateRequest(value interface{}) error {
	var in *publicpb.CreateRequest
	if v, ok := value.(*publicpb.CreateRequest); ok {
		in = v
	} else {
		v := value.(publicpb.CreateRequest)
		in = &v
	}

	return v.ValidateCreateRequest(in)
}
func (v validator) ValidateCreateResponse(in *publicpb.CreateResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Person,
			validation.By(v.ByPerson),
		),
	)
}

func (v validator) ByCreateResponse(value interface{}) error {
	var in *publicpb.CreateResponse
	if v, ok := value.(*publicpb.CreateResponse); ok {
		in = v
	} else {
		v := value.(publicpb.CreateResponse)
		in = &v
	}

	return v.ValidateCreateResponse(in)
}
func (v validator) ValidateGetRequest(in *publicpb.GetRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id,
			validation.Required,
			is.UUID,
		),
	)
}

func (v validator) ByGetRequest(value interface{}) error {
	var in *publicpb.GetRequest
	if v, ok := value.(*publicpb.GetRequest); ok {
		in = v
	} else {
		v := value.(publicpb.GetRequest)
		in = &v
	}

	return v.ValidateGetRequest(in)
}
func (v validator) ValidateGetResponse(in *publicpb.GetResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Person,
			validation.By(v.ByPerson),
		),
	)
}

func (v validator) ByGetResponse(value interface{}) error {
	var in *publicpb.GetResponse
	if v, ok := value.(*publicpb.GetResponse); ok {
		in = v
	} else {
		v := value.(publicpb.GetResponse)
		in = &v
	}

	return v.ValidateGetResponse(in)
}
func (v validator) ValidateDeleteRequest(in *publicpb.DeleteRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id),
	)
}

func (v validator) ByDeleteRequest(value interface{}) error {
	var in *publicpb.DeleteRequest
	if v, ok := value.(*publicpb.DeleteRequest); ok {
		in = v
	} else {
		v := value.(publicpb.DeleteRequest)
		in = &v
	}

	return v.ValidateDeleteRequest(in)
}
func (v validator) ValidateDeleteResponse(in *publicpb.DeleteResponse) error {
	return validation.ValidateStruct(in)
}

func (v validator) ByDeleteResponse(value interface{}) error {
	var in *publicpb.DeleteResponse
	if v, ok := value.(*publicpb.DeleteResponse); ok {
		in = v
	} else {
		v := value.(publicpb.DeleteResponse)
		in = &v
	}

	return v.ValidateDeleteResponse(in)
}
func (v validator) ValidateUpdateRequest(in *publicpb.UpdateRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Id,
			validation.Required,
			is.UUID,
		),
		validation.Field(&in.Person,
			validation.Required,
			validation.By(v.ByPerson),
		),
	)
}

func (v validator) ByUpdateRequest(value interface{}) error {
	var in *publicpb.UpdateRequest
	if v, ok := value.(*publicpb.UpdateRequest); ok {
		in = v
	} else {
		v := value.(publicpb.UpdateRequest)
		in = &v
	}

	return v.ValidateUpdateRequest(in)
}
func (v validator) ValidateUpdateResponse(in *publicpb.UpdateResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Person,
			validation.By(v.ByPerson),
		),
	)
}

func (v validator) ByUpdateResponse(value interface{}) error {
	var in *publicpb.UpdateResponse
	if v, ok := value.(*publicpb.UpdateResponse); ok {
		in = v
	} else {
		v := value.(publicpb.UpdateResponse)
		in = &v
	}

	return v.ValidateUpdateResponse(in)
}
func (v validator) ValidateBatchRequest(in *publicpb.BatchRequest) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.Creates,
			validation.Each(validation.By(v.ByCreateRequest)),
		),
	)
}

func (v validator) ByBatchRequest(value interface{}) error {
	var in *publicpb.BatchRequest
	if v, ok := value.(*publicpb.BatchRequest); ok {
		in = v
	} else {
		v := value.(publicpb.BatchRequest)
		in = &v
	}

	return v.ValidateBatchRequest(in)
}
func (v validator) ValidateBatchResponse(in *publicpb.BatchResponse) error {
	return validation.ValidateStruct(in,
		validation.Field(&in.People,
			validation.Each(validation.By(v.ByPerson)),
		),
	)
}

func (v validator) ByBatchResponse(value interface{}) error {
	var in *publicpb.BatchResponse
	if v, ok := value.(*publicpb.BatchResponse); ok {
		in = v
	} else {
		v := value.(publicpb.BatchResponse)
		in = &v
	}

	return v.ValidateBatchResponse(in)
}
func (v validator) ValidateExternalTimestamp(in *exttimestamppb.Timestamp) error {
	return nil
}

func (v validator) ByExternalTimestamp(value interface{}) error {
	var in *exttimestamppb.Timestamp
	if v, ok := value.(*exttimestamppb.Timestamp); ok {
		in = v
	} else {
		v := value.(exttimestamppb.Timestamp)
		in = &v
	}

	return v.ValidateExternalTimestamp(in)
}

func (s *Service) Create(ctx context.Context, in *publicpb.CreateRequest) (*publicpb.CreateResponse, error) {
	if err := s.ValidateCreateRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, _, err := s.CreateImpl(ctx, in)
	return out, err
}

func (s *Service) CreateImpl(ctx context.Context, in *publicpb.CreateRequest, mutators ...private.CreateRequestMutator) (*publicpb.CreateResponse, *privatepb.CreateResponse, error) {
	// Set mutators for all deprecated fields
	inPriv := s.ToPrivateCreateRequest(in)
	for _, mutator := range mutators {
		mutator(inPriv)
	}

	outPriv, err := s.Private.Create(ctx, inPriv)
	if err != nil {
		return nil, nil, err
	}

	out, err := s.ToPublicCreateResponse(outPriv)
	if err != nil {
		return nil, nil, status.Errorf(codes.FailedPrecondition, "%s", err)
	}
	return out, outPriv, nil
}
func (s *Service) Get(ctx context.Context, in *publicpb.GetRequest) (*publicpb.GetResponse, error) {
	if err := s.ValidateGetRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, _, err := s.GetImpl(ctx, in)
	return out, err
}

func (s *Service) GetImpl(ctx context.Context, in *publicpb.GetRequest, mutators ...private.FetchRequestMutator) (*publicpb.GetResponse, *privatepb.FetchResponse, error) {
	// Set mutators for all deprecated fields
	inPriv := s.ToPrivateFetchRequest(in)
	for _, mutator := range mutators {
		mutator(inPriv)
	}

	outPriv, err := s.Private.Fetch(ctx, inPriv)
	if err != nil {
		return nil, nil, err
	}

	out, err := s.ToPublicGetResponse(outPriv)
	if err != nil {
		return nil, nil, status.Errorf(codes.FailedPrecondition, "%s", err)
	}
	return out, outPriv, nil
}
func (s *Service) Delete(ctx context.Context, in *publicpb.DeleteRequest) (*publicpb.DeleteResponse, error) {
	if err := s.ValidateDeleteRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, _, err := s.DeleteImpl(ctx, in)
	return out, err
}

func (s *Service) DeleteImpl(ctx context.Context, in *publicpb.DeleteRequest, mutators ...private.DeleteRequestMutator) (*publicpb.DeleteResponse, *privatepb.DeleteResponse, error) {
	// Set mutators for all deprecated fields
	inPriv := s.ToPrivateDeleteRequest(in)
	for _, mutator := range mutators {
		mutator(inPriv)
	}

	outPriv, err := s.Private.Delete(ctx, inPriv)
	if err != nil {
		return nil, nil, err
	}

	out, err := s.ToPublicDeleteResponse(outPriv)
	if err != nil {
		return nil, nil, status.Errorf(codes.FailedPrecondition, "%s", err)
	}
	return out, outPriv, nil
}
func (s *Service) Update(ctx context.Context, in *publicpb.UpdateRequest) (*publicpb.UpdateResponse, error) {
	if err := s.ValidateUpdateRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, _, err := s.UpdateImpl(ctx, in)
	return out, err
}

func (s *Service) UpdateImpl(ctx context.Context, in *publicpb.UpdateRequest, mutators ...private.UpdateRequestMutator) (*publicpb.UpdateResponse, *privatepb.UpdateResponse, error) {
	// Set mutators for all deprecated fields
	inPriv := s.ToPrivateUpdateRequest(in)
	for _, mutator := range mutators {
		mutator(inPriv)
	}

	outPriv, err := s.Private.Update(ctx, inPriv)
	if err != nil {
		return nil, nil, err
	}

	out, err := s.ToPublicUpdateResponse(outPriv)
	if err != nil {
		return nil, nil, status.Errorf(codes.FailedPrecondition, "%s", err)
	}
	return out, outPriv, nil
}
func (s *Service) Batch(ctx context.Context, in *publicpb.BatchRequest) (*publicpb.BatchResponse, error) {
	if err := s.ValidateBatchRequest(in); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "%s", err)
	}

	out, _, err := s.BatchImpl(ctx, in)
	return out, err
}

func (s *Service) BatchImpl(ctx context.Context, in *publicpb.BatchRequest, mutators ...private.BatchRequestMutator) (*publicpb.BatchResponse, *privatepb.BatchResponse, error) {
	// Set mutators for all deprecated fields
	inPriv := s.ToPrivateBatchRequest(in)
	for _, mutator := range mutators {
		mutator(inPriv)
	}

	outPriv, err := s.Private.Batch(ctx, inPriv)
	if err != nil {
		return nil, nil, err
	}

	out, err := s.ToPublicBatchResponse(outPriv)
	if err != nil {
		return nil, nil, status.Errorf(codes.FailedPrecondition, "%s", err)
	}
	return out, outPriv, nil
}
