syntax = "proto3";

package example.v1;

option go_package = "github.com/dane/protoc-gen-go-svc/example/proto/go/v1;v1";
option (gen.svc.go_package) = "github.com/dane/protoc-gen-go-svc/example/proto/go/service/v1;v1";

import "google/protobuf/timestamp.proto";
import "gen/svc/annotations.proto";

service People {
  rpc Create(CreateRequest) returns (CreateResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc List(ListRequest) returns (ListResponse) {
    option (gen.svc.method).deprecated = true;
  };
}

message Person {
  string id = 1 [(gen.svc.field).receive = { required: true }];
  string first_name = 2 [
    (gen.svc.field).deprecated = true,
    (gen.svc.field).receive = { required: true }
  ];
  string last_name = 3  [
    (gen.svc.field).deprecated = true,
    (gen.svc.field).receive = { required: true }
  ];
  Employment employment = 4 [(gen.svc.field).receive = { required: true }];
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  Hobby hobby = 7 [(gen.svc.field).validate = { required: true }];

  enum Employment {
    UNSET = 0;
    EMPLOYED = 1 [
      (gen.svc.enum_value).delegate = { name: "FULL_TIME" },
      (gen.svc.enum_value).receive  = { names: ["FULL_TIME", "PART_TIME"] }
    ];
    UNEMPLOYED = 2;
  }
}

message Hobby {
  oneof type {
    option (gen.svc.oneof).validate = { required: true };
    Coding coding = 1;
    Reading reading = 2;
    Biking biking = 3 [(gen.svc.field).delegate = { name: "cycling" }];
  }
}

message Coding {
  string language = 1;
}

message Reading {
  string genre = 1;
}

message Biking {
  option (gen.svc.message).delegate = { name: "Cycling" };
  string style = 1;
}

message CreateRequest {
  string id = 1 [(gen.svc.field).validate = { required: true, is: UUID }];
  string first_name = 2 [
    (gen.svc.field).deprecated = true,
    (gen.svc.field).validate = { required: true, min: { int64: 2 } }
  ];

  string last_name = 3 [
    (gen.svc.field).deprecated = true,
    (gen.svc.field).validate = { required: true, min: { int64: 2 } }
  ];
  Person.Employment employment = 4;
}

message CreateResponse {
  Person person = 1;
}

message GetRequest {
  string id = 1 [(gen.svc.field).validate = { required: true, is: UUID }];
}

message GetResponse {
  Person person = 1;
}

message DeleteRequest {
  string id = 1 [(gen.svc.field).validate = { required: true, is: UUID }];
}

message DeleteResponse {}

message ListRequest {}

message ListResponse {
  repeated Person people = 1;
}
