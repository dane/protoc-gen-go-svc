syntax = "proto3";

package example.private;

option go_package = "github.com/dane/protoc-gen-go-svc/example/proto/go/private;private";
option (gen.svc.go_package) = "github.com/dane/protoc-gen-go-svc/example/proto/go/service";

import "google/protobuf/timestamp.proto";
import "gen/svc/annotations.proto";

service People {
  rpc Create(CreateRequest) returns (CreateResponse);
  rpc Fetch(FetchRequest) returns (FetchResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc List(ListRequest) returns (ListResponse);
  rpc Update(UpdateRequest) returns (UpdateResponse);
}

message Person {
  string id = 1         [(gen.svc.field).validate = { required: true, is: UUID }];
  string first_name = 2 [(gen.svc.field).validate = { min: { int64: 2 } }];
  string last_name = 3  [(gen.svc.field).validate = { min: { int64: 2 } }];
  string full_name = 4  [(gen.svc.field).validate = { required: true, min: { int64: 5 } }];
  int64 age = 5         [(gen.svc.field).validate = { required: true, min: { int64: 16 } }];
  Employment employment = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  google.protobuf.Timestamp deleted_at = 9;
  Hobby hobby = 10 [(gen.svc.field).validate = { required: true }];


  enum Employment {
    UNDEFINED = 0;
    FULL_TIME = 1;
    PART_TIME = 2;
    UNEMPLOYED = 3;
  }
}

message Hobby {
  oneof type {
    option (gen.svc.oneof).validate = { required: true };
    Coding coding = 1;
    Reading reading = 2;
    Cycling cycling = 3;
  }
}

message Coding {
  string language = 1;
}

message Reading {
  string genre = 1;
}

message Cycling {
  string style = 1;
}

message CreateRequest {
  string id = 1         [(gen.svc.field).validate = { required: true, is: UUID }];
  string first_name = 2 [(gen.svc.field).validate = { min: { int64: 2 } }];
  string last_name = 3  [(gen.svc.field).validate = { min: { int64: 2 } }];
  string full_name = 4  [(gen.svc.field).validate = { required: true, min: { int64: 5 } }];
  int64 age = 5         [(gen.svc.field).validate = { required: true, min: { int64: 16 } }];
  Person.Employment employment = 6 [(gen.svc.field).validate = { required: true, in: ["FULL_TIME", "PART_TIME", "UNEMPLOYED"] }];
  Hobby hobby = 7       [(gen.svc.field).validate = { required: true }];

}

message CreateResponse {
  Person person = 1;
}

message FetchRequest {
  string id = 1;
}

message FetchResponse {
  Person person = 1;
}

message DeleteRequest {
  string id = 1;
}

message DeleteResponse {
  Person person = 1;
}

message ListRequest {}

message ListResponse {
  repeated Person people = 1;
}

message UpdateRequest {
  string id = 1     [(gen.svc.field).validate = { required: true, is: UUID }];
  Person person = 2 [(gen.svc.field).validate = { required: true }];
}

message UpdateResponse {
  Person person = 1;
}
