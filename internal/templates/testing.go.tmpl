package testing

import (
	"testing"
	"context"
	"io/ioutil"
	"net"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/grpc"
	{{ range .Messages -}}
		{{ if .IsExternal -}}
			{{ .PackageName }} "{{ .ImportPath }}"
		{{ end -}}
	{{ end }}

	service "{{ .ServiceImportPath }}"
	privatepb "{{ .Private.ImportPath }}"
	publicpb "{{ .ImportPath }}"
)

type TestFunc func(*testing.T, Params, []service.Option)

type Params struct {
	PublicInput string
	PublicOutput string
	PrivateInput string
	PrivateOutput string
}

{{ $publicPackageName := .PackageName -}}
{{ $privatePackageName := .Private.PackageName -}}
{{ $publicServiceName := .Name -}}
{{ range .Methods -}}
func New{{ .Name }}ConversionTest(t *testing.T, params Params, options []service.Option) {
	t.Run(`verify conversions between "{{ $publicPackageName }}" and "{{ $privatePackageName }}"`, func(t *testing.T) {
		var (
			publicIn   {{ .Input.Type }}
			publicOut  {{ .Output.Type }}
			privateIn  {{ .Input.PrivateType }}
			privateOut {{ .Output.PrivateType }}
		)

		files := map[string]protoreflect.ProtoMessage{
			params.PublicInput:   &publicIn,
			params.PublicOutput:  &publicOut,
			params.PrivateInput:  &privateIn,
			params.PrivateOutput: &privateOut,
		}

		for fileName, dst := range files {
			b, err := ioutil.ReadFile(fileName)
			if err != nil {
				t.Fatal(err)
			}

			if err := protojson.Unmarshal(b, dst); err != nil {
				t.Fatalf("%s: %s", fileName, err)
			}
		}

		ctx := context.Background()
		s := &server{
			{{ .Private.Name }}Input:  &privateIn,
			{{ .Private.Name }}Output: &privateOut,
		}
		addr, cleanup := startServer(t, s, options)
		defer cleanup()

		conn, err := grpc.Dial(addr, grpc.WithInsecure())
		if err != nil {
			t.Fatal(err)
		}

		client := publicpb.New{{ $publicServiceName }}Client(conn)
		out, err := client.{{ .Name }}(ctx, &publicIn)
		if err != nil {
			t.Fatal(err)
		}

		if !cmp.Equal(out, &publicOut, ignore()...) {
			t.Fatal(cmp.Diff(out, &publicOut, ignore()...))
		}

		if s.diff != "" {
			t.Fatal(s.diff)
		}
	})
}
{{ end -}}

func startServer(t *testing.T, ts privatepb.{{ .Name }}Server, options []service.Option) (string, func()) {
	ln, err := net.Listen("tcp", ":0")
	if err != nil {
		t.Fatal(err)
	}

	srv := grpc.NewServer()
	service.RegisterServer(srv, ts, options...)

	go func(t *testing.T, srv *grpc.Server, ln net.Listener) {
		if err := srv.Serve(ln); err != nil {
			t.Fatal(err)
		}
	}(t, srv, ln)

	return ln.Addr().String(), srv.Stop
}

type server struct {
	privatepb.{{ .Private.Name }}Server
	diff string
	{{ range .Methods -}}
		{{ .Private.Name }}Input *{{ .Input.PrivateType }}
		{{ .Private.Name }}Output *{{ .Output.PrivateType }}
	{{ end -}}
}

{{ range .Methods -}}
func (s *server) {{ .Private.Name }}(_ context.Context, in *{{ .Input.PrivateType }}) (*{{ .Output.PrivateType }}, error) {
	if !cmp.Equal(in, s.{{ .Private.Name }}Input, ignore()...) {
		s.diff = cmp.Diff(in, s.{{ .Private.Name }}Input, ignore()...)
	}

	return s.{{ .Private.Name }}Output, nil
}
{{ end -}}

func ignore() []cmp.Option {
	return []cmp.Option{
	{{ range .Messages -}}
		{{ if .IsExternal -}}
			cmpopts.IgnoreUnexported({{ .PackageName }}.{{ .Name }}{}),
		{{ else -}}
			cmpopts.IgnoreUnexported({{ .Type }}{}),
			cmpopts.IgnoreUnexported({{ .PrivateType }}{}),
		{{ end -}}
	{{ end -}}
	}
}

