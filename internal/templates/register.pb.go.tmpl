// Code generated by protoc-gen-go. DO NOT EDIT.
// protoc-gen-go-svc: dev

package {{ .PackageName }}

import (
	grpc "google.golang.org/grpc"

	{{ range .Services -}}
		{{ .PackageName }}pb "{{ .ImportPath }}"
		{{ .PackageName }}svc "{{ .ServiceImportPath }}/{{ .PackageName }}"
	{{ end -}}
	privatepb "{{ .Private.ImportPath }}"
	privatesvc "{{ .Private.ServiceImportPath }}/{{ .Private.PackageName }}"
)

type Option interface {
	Name() string
}

func RegisterServer(server *grpc.Server, impl privatepb.{{ .Private.Name }}Server, options ...Option) {
	servicePrivate := &privatesvc.Service{
		Validator: privatesvc.NewValidator(),
		Impl:      impl,
	}

	{{ range .Services -}}
		service{{ .PackageName }} := &{{ .PackageName }}svc.Service{
			Validator: {{ .PackageName }}svc.NewValidator(),
			Converter: {{ .PackageName }}svc.NewConverter(),
			Private:   servicePrivate,
			{{ if not .IsLatest -}}
			Next: service{{ .Next.PackageName }},
			{{ end -}}
		}

		{{ .PackageName }}pb.Register{{ .Name }}Server(server, service{{ .PackageName }})
	{{ end -}}

	for _, opt := range options {
		switch opt.Name() {
		case {{ .Private.PackageName }}svc.ValidatorName:
			servicePrivate.Validator = opt.({{ .Private.PackageName }}svc.Validator)
		{{ range .Services -}}
			case {{ .PackageName }}svc.ValidatorName:
				service{{ .PackageName }}.Validator = opt.({{ .PackageName }}svc.Validator)
			case {{ .PackageName }}svc.ConverterName:
				service{{ .PackageName }}.Converter = opt.({{ .PackageName }}svc.Converter)
		{{ end -}}
		}
	}
}
