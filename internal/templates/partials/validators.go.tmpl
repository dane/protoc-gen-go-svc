{{ define "validators" -}}
func NewValidator() Validator {
	return validator{}
}

type Validator interface {
	Name() string
	{{ range . -}}
		Validate{{ .Ref }}(*{{ .Type }}) error
		By{{ .Ref }}(interface{}) error
	{{ end -}}
}

type validator struct{}

func (v validator) Name() string {
	return ValidatorName
}

{{ range . -}}
	func(v validator) Validate{{ .Ref }}(in *{{ .Type }}) error {
		{{ if .IsExternal -}}
			return nil
		{{ else -}}

		return validation.ValidateStruct(in,
			{{ range .Fields -}}
			validation.Field(&in.{{ .Name }},
				{{ if .IsRepeated -}}
					validation.Each({{ range .Rules }}{{.}},{{ end }}),
				{{ else -}}
					{{ range .Rules -}}
						{{.}},
					{{ end -}}
				{{ end -}}
			),
			{{ end -}}
		)
		{{ end -}}
	}

	func (v validator) By{{ .Ref }}(value interface{}) error {
		var in *{{ .Type }}
		if v, ok := value.(*{{ .Type }}); ok {
			in = v
		} else {
			v := value.({{ .Type }})
			in = &v
		}

		return v.Validate{{ .Ref }}(in)
	}
{{ end -}}
{{ end -}}

