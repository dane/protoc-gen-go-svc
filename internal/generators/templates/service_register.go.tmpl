// Code generated by protoc-gen-go. DO NOT EDIT.
// protoc-gen-go-svc: {{ pluginVersion }}

package service

import (
{{ range .Imports -}}
	{{ .GoName }} {{ .GoImportPath }}
{{ end -}}
)

type Option interface {
	Name() string
}

func RegisterServer(server *grpc.Server, impl privatepb.{{ .Private.GoName }}Server, options ...Option) {
	servicePrivate := &{{ .Private.GoPackageName }}.Service{
		Validator: {{ .Private.GoPackageName }}.NewValidator(),
		Impl: impl,
	}

	{{- $services := .Services -}}
	{{ range $i, $service := .Services }}
		{{ $packageName := $service.GoPackageName }}
		{{ $serviceName := $service.GoName }}
		{{ $varName := sprintf "service%s" $packageName }}

		{{ $varName }} := &{{ $packageName }}.Service{
		Validator: {{ $packageName }}.NewValidator(),
		Converter: {{ $packageName }}.NewConverter(),
		Private: servicePrivate,
		{{- if gt $i 0 -}}
			{{- $nextService := previous $service $services -}}
			{{ $nextVarName := sprintf "service%s" $nextService.GoPackageName }}
			Next: {{ $nextVarName }},
		{{ end }}
		}

		{{ $packageName }}pb.Register{{ $serviceName }}Server(server, {{ $varName }})
	{{ end }}

	for _, opt := range options {
		switch opt.Name() {
		case private.ValidatorName:
			servicePrivate.Validator = opt.(private.Validator)
			{{ range .Services -}}
				{{ $packageName := .GoPackageName -}}
				{{ $varName := sprintf "service%s" $packageName -}}
				case {{ $packageName }}.ConverterName:
					{{ $varName }}.Converter = opt.({{ $packageName }}.Converter)
				case {{ $packageName }}.ValidatorName:
					{{ $varName }}.Validator = opt.({{ $packageName }}.Validator)
			{{ end -}}
		}
	}
}
